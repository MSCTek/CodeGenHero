// <auto-generated> - Template:ModelsBackedByDto, Version:1.0, Id:4d03f2c7-de26-4abe-a267-cad747c9606a
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using CodeGenHero.BingoBuzz.API.Client.Interface;
using CodeGenHero.BingoBuzz.Model.BB.Interface;
using xDTO = CodeGenHero.BingoBuzz.DTO.BB;

namespace CodeGenHero.BingoBuzz.Model.BB
{

	public class LoadRequestRecurrenceRule : EventArgs
	{
		public LoadRequestRecurrenceRule(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class RecurrenceRule : BaseModel<IWebApiDataServiceBB>, IRecurrenceRule
	{
		public event EventHandler<LoadRequestRecurrenceRule> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.RecurrenceRule _dto = null;

		public RecurrenceRule(ILoggingService log, IDataService<IWebApiDataServiceBB> dataService) : base(log, dataService)
		{
			_dto = new xDTO.RecurrenceRule();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public RecurrenceRule(ILoggingService log, IDataService<IWebApiDataServiceBB> dataService, xDTO.RecurrenceRule dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual System.DateTime? EndDate { get { return _dto.EndDate; } }
		public virtual int FrequencyTypeId { get { return _dto.FrequencyTypeId; } }
		public virtual int? Hour { get { return _dto.Hour; } }
		public virtual int? Minutes { get { return _dto.Minutes; } }
		public virtual int? OrdWeek { get { return _dto.OrdWeek; } }
		public virtual System.Guid RecurrenceRuleId { get { return _dto.RecurrenceRuleId; } }
		public virtual int? Seconds { get { return _dto.Seconds; } }
		public virtual string WeekDay { get { return _dto.WeekDay; } }
		public virtual int? WeekDayNum { get { return _dto.WeekDayNum; } }

		private IFrequencyType _frequencyType = null; // Foreign Key
		private List<IMeetingSchedule> _meetingSchedules = null; // Reverse Navigation


		public virtual IFrequencyType FrequencyType
		{
			get
			{
				if (_frequencyType == null && _dto != null && _dto.FrequencyType != null)
				{
					_frequencyType = new FrequencyType(Log, DataService, _dto.FrequencyType);
				}

				return _frequencyType;
			}
		}

		public virtual List<IMeetingSchedule> MeetingSchedules
		{
			get
			{
				if (_meetingSchedules == null && _dto != null && _dto.MeetingSchedules != null)
				{
					_meetingSchedules = new List<IMeetingSchedule>();
					foreach (var dtoItem in _dto.MeetingSchedules)
					{
						_meetingSchedules.Add(new MeetingSchedule(Log, DataService, dtoItem));
					}
				}

				return _meetingSchedules;
			}
		}



	}
}
