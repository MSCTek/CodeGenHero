// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using CodeGenHero.BingoBuzz.API.Client.Interface;
using CodeGenHero.BingoBuzz.Model.BB.Interface;
using xDTO = CodeGenHero.BingoBuzz.DTO.BB;

namespace CodeGenHero.BingoBuzz.Model.BB
{

	public class LoadRequestNotificationRule : EventArgs
	{
		public LoadRequestNotificationRule(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class NotificationRule : BaseModel<IWebApiDataServiceBB>, INotificationRule
	{
		public event EventHandler<LoadRequestNotificationRule> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.NotificationRule _dto = null;

		public NotificationRule(ILoggingService log, IDataService<IWebApiDataServiceBB> dataService) : base(log, dataService)
		{
			_dto = new xDTO.NotificationRule();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public NotificationRule(ILoggingService log, IDataService<IWebApiDataServiceBB> dataService, xDTO.NotificationRule dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual int MinutesBeforehand { get { return _dto.MinutesBeforehand; } }
		public virtual int NotificationMethodTypeId { get { return _dto.NotificationMethodTypeId; } }
		public virtual System.Guid NotificationRuleId { get { return _dto.NotificationRuleId; } }

		private INotificationMethodType _notificationMethodType = null; // Foreign Key
		private List<IMeetingAttendee> _meetingAttendees = null; // Reverse Navigation


		public virtual INotificationMethodType NotificationMethodType
		{
			get
			{
				if (_notificationMethodType == null && _dto != null && _dto.NotificationMethodType != null)
				{
					_notificationMethodType = new NotificationMethodType(Log, DataService, _dto.NotificationMethodType);
				}

				return _notificationMethodType;
			}
		}

		public virtual List<IMeetingAttendee> MeetingAttendees
		{
			get
			{
				if (_meetingAttendees == null)
				{
					OnLazyLoadRequest(this, new LoadRequestNotificationRule(nameof(MeetingAttendees)));
				}

				return _meetingAttendees;
			}
		}



	}
}
