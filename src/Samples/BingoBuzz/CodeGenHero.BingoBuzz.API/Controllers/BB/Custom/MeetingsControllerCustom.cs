// <auto-generated> - Template:WebApiControllerPartialMethods, Version:1.0, Id:54f0612b-5235-437d-af2d-0b75efa68630
using CodeGenHero.BingoBuzz.Repository.Entities.BB;
using CodeGenHero.DataService;
using CodeGenHero.Logging;
using CodeGenHero.WebApi;
using System;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http;
using System.Web.Http.Routing;
using entBB = CodeGenHero.BingoBuzz.Repository.Entities.BB;

namespace CodeGenHero.BingoBuzz.API.Controllers.BB
{
	public partial class MeetingsBBController : BBBaseApiController
	{

		[HttpGet]
		[VersionedRoute(template: "GetMeetingsAndAttendeesByUserId", allowedVersion: 1, Name = "GetMeetingsAndAttendeesByUserId")]
		public async Task<IHttpActionResult> GetMeetingsAndAttendeesByUserId(string sort = null, string fields = null, string filter = null, int page = 1, int pageSize = int.MaxValue)
		{
			try
			{
				base.OnActionExecuting();

				var fieldList = GetListByDelimiter(fields);
				var filterList = GetListByDelimiter(filter);
				var dbItems = Repo.GetQueryableMeeting().AsNoTracking()
					.Include(x => x.MeetingAttendees.Select(c => c.User_UserId));

				var queryableFilters = filterList.ToQueryableFilter();
				var userCriterion = queryableFilters.Where(y => y.Member.ToLowerInvariant() == nameof(MeetingAttendee.UserId).ToLowerInvariant()).FirstOrDefault();

				if (userCriterion != null)
				{
					dbItems = dbItems.Where(x => x.MeetingAttendees.Any(u => u.UserId == new Guid(userCriterion.Value)));
					queryableFilters.Remove(userCriterion);  // The evaluated criterion needs to be removed from the list of filters before we invoke the ApplyFilter() extension method.
					filterList = queryableFilters.ToQueryableStringList();
				}

				dbItems = dbItems.ApplyFilter(filterList);
				dbItems = dbItems.ApplySort(sort ?? (typeof(entBB.Meeting).GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)).First().Name);

				var urlHelper = new UrlHelper(Request);
				PageData paginationHeader = BuildPaginationHeader(urlHelper, GET_LIST_ROUTE_NAME, page: page, totalCount: dbItems.Count(), pageSize: pageSize, sort: sort);
				HttpContext.Current.Response.Headers.Add("X-Pagination", Newtonsoft.Json.JsonConvert.SerializeObject(paginationHeader));

				// return result
				return Ok(dbItems
				.Skip(pageSize * (page - 1))
				.Take(pageSize)
				.ToList()
				.Select(x => _factory.CreateDataShapedObject(x, fieldList, false)));
			}
			catch (Exception ex)
			{
				Error(message: ex.Message, logMessageType: LogMessageType.Instance.Exception_WebApi, ex: ex);

				if (System.Diagnostics.Debugger.IsAttached)
					System.Diagnostics.Debugger.Break();

				return InternalServerError();
			}
		}


		/// <summary>
		/// A sample implementation of custom logic used to include related entities to return with a DTO.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		partial void RunCustomLogicOnGetQueryableByPK(ref IQueryable<entBB.Meeting> qryItem, System.Guid meetingId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.Company).AsNoTracking()
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking()
				 // .Include(x => x.BingoInstances).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.MeetingAttendees).AsNoTracking()
				 .Include(x => x.MeetingSchedules).AsNoTracking();
			 }
		 }

		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK(ref entBB.Meeting dbItem, System.Guid meetingId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		///// <summary>
		///// A sample implementation of custom logic used to filter on a field that exists in a related, parent, table.
		///// </summary>
		///// <param name="dbItems"></param>
		///// <param name="filterList"></param>
		//partial void RunCustomLogicAfterGetQueryableList(ref IQueryable<entBB.Meeting> dbItems, ref List<string> filterList)
		//{
		//	var queryableFilters = filterList.ToQueryableFilter();
		//	var myFilterCriterion = queryableFilters.Where(y => y.Member.ToLowerInvariant() == "<myFieldName>").FirstOrDefault(); // Examine the incoming filter for the presence of a field name which does not exist on the target entity.

		//	if (myFilterCriterion != null)
		//	{   // myFieldName is a criterion that has to be evaluated at a level other than our target entity.
		//		dbItems = dbItems.Include(x => x.myFKRelatedEntity).Where(x => x.myFKRelatedEntity.myFieldName == new Guid(myFilterCriterion.Value));
		//		queryableFilters.Remove(myFilterCriterion);  // The evaluated criterion needs to be removed from the list of filters before we invoke the ApplyFilter() extension method.
		//		filterList = queryableFilters.ToQueryableStringList();
		//	}
		//}
	}
}
