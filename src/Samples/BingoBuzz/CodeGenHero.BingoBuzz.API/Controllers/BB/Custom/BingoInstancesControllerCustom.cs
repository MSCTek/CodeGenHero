// <auto-generated> - Template:WebApiControllerPartialMethods, Version:1.0, Id:54f0612b-5235-437d-af2d-0b75efa68630
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http;
using System.Web.Http.Routing;
using Marvin.JsonPatch;
using CodeGenHero.DataService;
using CodeGenHero.Logging;
using CodeGenHero.Repository.AutoMapper;
using CodeGenHero.WebApi;
using CodeGenHero.BingoBuzz.Repository.Interface;
using cghEnums = CodeGenHero.Repository.Enums;
using dtoBB = CodeGenHero.BingoBuzz.DTO.BB;
using entBB = CodeGenHero.BingoBuzz.Repository.Entities.BB;
using CodeGenHero.BingoBuzz.DTO.BB;

namespace CodeGenHero.BingoBuzz.API.Controllers.BB
{
	public partial class BingoInstancesBBController : BBBaseApiController
	{
		/// <summary>
		/// A sample implementation of custom logic used to include related entities to return with a DTO.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK(ref IQueryable<entBB.BingoInstance> qryItem, System.Guid bingoInstanceId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.BingoInstanceStatusType).AsNoTracking()
				 .Include(x => x.Meeting).AsNoTracking()
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking()
				 .Include(x => x.BingoInstanceContents).AsNoTracking()
				 .Include(x => x.BingoInstanceEvents).AsNoTracking();
			 }
		 }

        [HttpGet]
        [VersionedRoute(template: "GetInstancesAndEventsByMeetingId", allowedVersion: 1, Name = "GetInstancesAndEventsByMeetingId")]
        public async Task<IHttpActionResult> GetInstancesAndEventsByMeetingId(string sort = null, string fields = null, string filter = null, int page = 1, int pageSize = int.MaxValue)
        {
            try
            {
                base.OnActionExecuting();

                var fieldList = GetListByDelimiter(fields);
                var filterList = GetListByDelimiter(filter);
                var dbItems = Repo.GetQueryableBingoInstance().AsNoTracking()
                    .Include(x => x.BingoInstanceContents).AsNoTracking()
                    .Include(x => x.BingoInstanceEvents).AsNoTracking();

                var queryableFilters = filterList.ToQueryableFilter();
                var meetingCriterion = queryableFilters.Where(y => y.Member.ToLowerInvariant() == nameof(BingoInstance.MeetingId).ToLowerInvariant()).FirstOrDefault();

                if (meetingCriterion != null)
                {
                    dbItems = dbItems.Where(x => x.MeetingId == new Guid(meetingCriterion.Value));
                    queryableFilters.Remove(meetingCriterion);  // The evaluated criterion needs to be removed from the list of filters before we invoke the ApplyFilter() extension method.
                    filterList = queryableFilters.ToQueryableStringList();
                }

                dbItems = dbItems.ApplyFilter(filterList);
                dbItems = dbItems.ApplySort(sort ?? (typeof(entBB.BingoInstance).GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)).First().Name);

                var urlHelper = new UrlHelper(Request);
                PageData paginationHeader = BuildPaginationHeader(urlHelper, GET_LIST_ROUTE_NAME, page: page, totalCount: dbItems.Count(), pageSize: pageSize, sort: sort);
                HttpContext.Current.Response.Headers.Add("X-Pagination", Newtonsoft.Json.JsonConvert.SerializeObject(paginationHeader));

                // return result
                return Ok(dbItems
                .Skip(pageSize * (page - 1))
                .Take(pageSize)
                .ToList()
                .Select(x => _factory.CreateDataShapedObject(x, fieldList, false)));
            }
            catch (Exception ex)
            {
                Error(message: ex.Message, logMessageType: LogMessageType.Instance.Exception_WebApi, ex: ex);

                if (System.Diagnostics.Debugger.IsAttached)
                    System.Diagnostics.Debugger.Break();

                return InternalServerError();
            }
        }


        [HttpPost]
        [VersionedRoute(template: "PostInstanceAndContents", allowedVersion: 1, Name = "PostInstanceAndContents")]
        public async Task<IHttpActionResult> PostInstanceAndContents([FromBody] dtoBB.BingoInstance dtoItem)
        {
            try
            {
                base.OnActionExecuting();

                if (dtoItem == null)
                {
                    return BadRequest();
                }

                // try mapping & saving
                var newDBItem = _factory.Create(dtoItem);

                var result = Repo.Insert(newDBItem);
                if (result.Status == cghEnums.RepositoryActionStatus.Created)
                {   // map to dto
                    RunCustomLogicAfterInsert(newDBItem);

                    var newDTOItem = _factory.Create(result.Entity);
                    var uriFormatted = Request.RequestUri.ToString().EndsWith("/") == true ? Request.RequestUri.ToString().Substring(0, Request.RequestUri.ToString().Length - 1) : Request.RequestUri.ToString();
                    return Created($"{uriFormatted}/{newDTOItem.BingoInstanceId}", newDTOItem);
                }

                Warn("Unable to create object via Web API", LogMessageType.Instance.Warn_WebApi, result.Exception, httpResponseStatusCode: 400, url: Request.RequestUri.ToString());
                return BadRequest();
            }
            catch (Exception ex)
            {
                Error(message: ex.Message, logMessageType: LogMessageType.Instance.Exception_WebApi, ex: ex);

                if (System.Diagnostics.Debugger.IsAttached)
                    System.Diagnostics.Debugger.Break();

                return InternalServerError();
            }
        }
        
        ///// <summary>
        ///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
        ///// </summary>
        ///// <param name="dbItem"></param>
        ///// <param name="id"></param>
        ///// <param name="numChildLevels"></param>
        // partial void RunCustomLogicOnGetEntityByPK(ref entBB.BingoInstance dbItem, System.Guid bingoInstanceId, int numChildLevels)
        // {
        // if (numChildLevels > 1)
        // {
        // int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

        // var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

        // foreach (var lineItemDiscount in lineItemDiscounts)
        // { // Find the match and add the item to it.
        // var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

        // if (orderLineItem == null)
        // {
        // throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
        // }

        // orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
        // }
        // }

        // }

        ///// <summary>
        ///// A sample implementation of custom logic used to filter on a field that exists in a related, parent, table.
        ///// </summary>
        ///// <param name="dbItems"></param>
        ///// <param name="filterList"></param>
        //partial void RunCustomLogicAfterGetQueryableList(ref IQueryable<entBB.BingoInstance> dbItems, ref List<string> filterList)
        //{
        //	var queryableFilters = filterList.ToQueryableFilter();
        //	var myFilterCriterion = queryableFilters.Where(y => y.Member.ToLowerInvariant() == "<myFieldName>").FirstOrDefault(); // Examine the incoming filter for the presence of a field name which does not exist on the target entity.

        //	if (myFilterCriterion != null)
        //	{   // myFieldName is a criterion that has to be evaluated at a level other than our target entity.
        //		dbItems = dbItems.Include(x => x.myFKRelatedEntity).Where(x => x.myFKRelatedEntity.myFieldName == new Guid(myFilterCriterion.Value));
        //		queryableFilters.Remove(myFilterCriterion);  // The evaluated criterion needs to be removed from the list of filters before we invoke the ApplyFilter() extension method.
        //		filterList = queryableFilters.ToQueryableStringList();
        //	}
        //}
    }
}
