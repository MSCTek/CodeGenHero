// <auto-generated>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using MSC.BingoBuzz.DTO.BB;
using CodeGenHero.EAMVCXamPOCO;
using CodeGenHero.EAMVCXamPOCO.Interface;
using MSC.BingoBuzz.API.Client.Interface;
using CodeGenHero.EAMVCXamPOCO.DataService;
using CodeGenHero.EAMVCXamPOCO.DataService.Interface;

namespace MSC.BingoBuzz.API.Client
{
	public partial class WebApiDataServiceBB : WebApiDataServiceBase, IWebApiDataServiceBB
	{
		public WebApiDataServiceBB(ILoggingService log, IWebApiExecutionContext context) : base(log, context)
		{ }

		private WebApiDataServiceBB() : base()
		{ }

			#region GetAllPages

			public async Task<List<BingoContent>> GetAllPagesBingoContentsAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<BingoContent>(GetBingoContentsAsync, minUpdatedDate);
			}

			public async Task<List<BingoInstance>> GetAllPagesBingoInstancesAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<BingoInstance>(GetBingoInstancesAsync, minUpdatedDate);
			}

			public async Task<List<BingoInstanceContent>> GetAllPagesBingoInstanceContentsAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<BingoInstanceContent>(GetBingoInstanceContentsAsync, minUpdatedDate);
			}

			public async Task<List<BingoInstanceEvent>> GetAllPagesBingoInstanceEventsAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<BingoInstanceEvent>(GetBingoInstanceEventsAsync, minUpdatedDate);
			}

			public async Task<List<BingoInstanceEventType>> GetAllPagesBingoInstanceEventTypesAsync()
			{
				return await GetAllPageDataResultsAsync<BingoInstanceEventType>(GetBingoInstanceEventTypesAsync);
			}

			public async Task<List<Company>> GetAllPagesCompaniesAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<Company>(GetCompaniesAsync, minUpdatedDate);
			}

			public async Task<List<FrequencyType>> GetAllPagesFrequencyTypesAsync()
			{
				return await GetAllPageDataResultsAsync<FrequencyType>(GetFrequencyTypesAsync);
			}

			public async Task<List<Meeting>> GetAllPagesMeetingsAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<Meeting>(GetMeetingsAsync, minUpdatedDate);
			}

			public async Task<List<MeetingAttendee>> GetAllPagesMeetingAttendeesAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<MeetingAttendee>(GetMeetingAttendeesAsync, minUpdatedDate);
			}

			public async Task<List<MeetingSchedule>> GetAllPagesMeetingSchedulesAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<MeetingSchedule>(GetMeetingSchedulesAsync, minUpdatedDate);
			}

			public async Task<List<NotificationMethodType>> GetAllPagesNotificationMethodTypesAsync()
			{
				return await GetAllPageDataResultsAsync<NotificationMethodType>(GetNotificationMethodTypesAsync);
			}

			public async Task<List<NotificationRule>> GetAllPagesNotificationRulesAsync()
			{
				return await GetAllPageDataResultsAsync<NotificationRule>(GetNotificationRulesAsync);
			}

			public async Task<List<RecurrenceRule>> GetAllPagesRecurrenceRulesAsync()
			{
				return await GetAllPageDataResultsAsync<RecurrenceRule>(GetRecurrenceRulesAsync);
			}

			public async Task<List<User>> GetAllPagesUsersAsync(DateTime? minUpdatedDate)
			{
				return await GetAllPageDataResultsAsync<User>(GetUsersAsync, minUpdatedDate);
			}

			#endregion GetAllPages

			#region GetOnePage

			public async Task<PageData<List<BingoContent>>> GetBingoContentsAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<BingoContent>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoContents", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<BingoInstance>>> GetBingoInstancesAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<BingoInstance>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstances", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<BingoInstanceContent>>> GetBingoInstanceContentsAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<BingoInstanceContent>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<BingoInstanceEvent>>> GetBingoInstanceEventsAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<BingoInstanceEvent>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<BingoInstanceEventType>>> GetBingoInstanceEventTypesAsync(int page = 1, int pageSize = 100)
			{
				List<string> filter = null;
				return await SerializationHelper.SerializeCallResultsGet<List<BingoInstanceEventType>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<Company>>> GetCompaniesAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<Company>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Companies", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<FrequencyType>>> GetFrequencyTypesAsync(int page = 1, int pageSize = 100)
			{
				List<string> filter = null;
				return await SerializationHelper.SerializeCallResultsGet<List<FrequencyType>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FrequencyTypes", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<Meeting>>> GetMeetingsAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<Meeting>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Meetings", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<MeetingAttendee>>> GetMeetingAttendeesAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<MeetingAttendee>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingAttendees", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<MeetingSchedule>>> GetMeetingSchedulesAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<MeetingSchedule>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingSchedules", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<NotificationMethodType>>> GetNotificationMethodTypesAsync(int page = 1, int pageSize = 100)
			{
				List<string> filter = null;
				return await SerializationHelper.SerializeCallResultsGet<List<NotificationMethodType>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<NotificationRule>>> GetNotificationRulesAsync(int page = 1, int pageSize = 100)
			{
				List<string> filter = null;
				return await SerializationHelper.SerializeCallResultsGet<List<NotificationRule>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationRules", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<RecurrenceRule>>> GetRecurrenceRulesAsync(int page = 1, int pageSize = 100)
			{
				List<string> filter = null;
				return await SerializationHelper.SerializeCallResultsGet<List<RecurrenceRule>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RecurrenceRules", filter, page: page, pageSize: pageSize); 
			}

			public async Task<PageData<List<User>>> GetUsersAsync(DateTime? minUpdatedDate, int page = 1, int pageSize = 100)
			{
				List<string> filter = BuildFilter(minUpdatedDate, "UpdatedDate");
				return await SerializationHelper.SerializeCallResultsGet<List<User>>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users", filter, page: page, pageSize: pageSize); 
			}

			#endregion GetOnePage

			#region Get By PK

			public async Task<HttpCallResult<BingoContent>> GetBingoContentAsync(System.Guid bingoContentId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<BingoContent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoContents/{bingoContentId}");
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstance>> GetBingoInstanceAsync(System.Guid bingoInstanceId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<BingoInstance>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstances/{bingoInstanceId}");
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceContent>> GetBingoInstanceContentAsync(System.Guid bingoInstanceContentId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<BingoInstanceContent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents/{bingoInstanceContentId}");
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceEvent>> GetBingoInstanceEventAsync(System.Guid bingoInstanceEventId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<BingoInstanceEvent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents/{bingoInstanceEventId}");
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceEventType>> GetBingoInstanceEventTypeAsync(int bingoInstanceEventTypeId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<BingoInstanceEventType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes/{bingoInstanceEventTypeId}");
				return retVal;
			}

			public async Task<HttpCallResult<Company>> GetCompanyAsync(System.Guid companyId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<Company>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Companies/{companyId}");
				return retVal;
			}

			public async Task<HttpCallResult<FrequencyType>> GetFrequencyTypeAsync(int frequencyTypeId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<FrequencyType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FrequencyTypes/{frequencyTypeId}");
				return retVal;
			}

			public async Task<HttpCallResult<Meeting>> GetMeetingAsync(System.Guid meetingId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<Meeting>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Meetings/{meetingId}");
				return retVal;
			}

			public async Task<HttpCallResult<MeetingAttendee>> GetMeetingAttendeeAsync(System.Guid meetingAttendeeId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<MeetingAttendee>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingAttendees/{meetingAttendeeId}");
				return retVal;
			}

			public async Task<HttpCallResult<MeetingSchedule>> GetMeetingScheduleAsync(System.Guid meetingScheduleId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<MeetingSchedule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingSchedules/{meetingScheduleId}");
				return retVal;
			}

			public async Task<HttpCallResult<NotificationMethodType>> GetNotificationMethodTypeAsync(int notificationMethodTypeId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<NotificationMethodType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes/{notificationMethodTypeId}");
				return retVal;
			}

			public async Task<HttpCallResult<NotificationRule>> GetNotificationRuleAsync(System.Guid notificationRuleId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<NotificationRule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationRules/{notificationRuleId}");
				return retVal;
			}

			public async Task<HttpCallResult<RecurrenceRule>> GetRecurrenceRuleAsync(System.Guid recurrenceRuleId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<RecurrenceRule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RecurrenceRules/{recurrenceRuleId}");
				return retVal;
			}

			public async Task<HttpCallResult<User>> GetUserAsync(System.Guid userId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsGet<User>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users/{userId}");
				return retVal;
			}

			#endregion Get By PK

			#region Create

			public async Task<HttpCallResult<BingoContent>> CreateBingoContentAsync(BingoContent item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<BingoContent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoContents/", item);
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstance>> CreateBingoInstanceAsync(BingoInstance item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<BingoInstance>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstances/", item);
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceContent>> CreateBingoInstanceContentAsync(BingoInstanceContent item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<BingoInstanceContent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents/", item);
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceEvent>> CreateBingoInstanceEventAsync(BingoInstanceEvent item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<BingoInstanceEvent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents/", item);
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceEventType>> CreateBingoInstanceEventTypeAsync(BingoInstanceEventType item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<BingoInstanceEventType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes/", item);
				return retVal;
			}

			public async Task<HttpCallResult<Company>> CreateCompanyAsync(Company item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<Company>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Companies/", item);
				return retVal;
			}

			public async Task<HttpCallResult<FrequencyType>> CreateFrequencyTypeAsync(FrequencyType item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<FrequencyType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FrequencyTypes/", item);
				return retVal;
			}

			public async Task<HttpCallResult<Meeting>> CreateMeetingAsync(Meeting item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<Meeting>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Meetings/", item);
				return retVal;
			}

			public async Task<HttpCallResult<MeetingAttendee>> CreateMeetingAttendeeAsync(MeetingAttendee item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<MeetingAttendee>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}MeetingAttendees/", item);
				return retVal;
			}

			public async Task<HttpCallResult<MeetingSchedule>> CreateMeetingScheduleAsync(MeetingSchedule item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<MeetingSchedule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}MeetingSchedules/", item);
				return retVal;
			}

			public async Task<HttpCallResult<NotificationMethodType>> CreateNotificationMethodTypeAsync(NotificationMethodType item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<NotificationMethodType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes/", item);
				return retVal;
			}

			public async Task<HttpCallResult<NotificationRule>> CreateNotificationRuleAsync(NotificationRule item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<NotificationRule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationRules/", item);
				return retVal;
			}

			public async Task<HttpCallResult<RecurrenceRule>> CreateRecurrenceRuleAsync(RecurrenceRule item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<RecurrenceRule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}RecurrenceRules/", item);
				return retVal;
			}

			public async Task<HttpCallResult<User>> CreateUserAsync(User item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPost<User>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Users/", item);
				return retVal;
			}

			#endregion Create

			#region Update

			public async Task<HttpCallResult<BingoContent>> UpdateBingoContentAsync(BingoContent item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<BingoContent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoContents/{item.BingoContentId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstance>> UpdateBingoInstanceAsync(BingoInstance item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<BingoInstance>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstances/{item.BingoInstanceId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceContent>> UpdateBingoInstanceContentAsync(BingoInstanceContent item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<BingoInstanceContent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents/{item.BingoInstanceContentId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceEvent>> UpdateBingoInstanceEventAsync(BingoInstanceEvent item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<BingoInstanceEvent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents/{item.BingoInstanceEventId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceEventType>> UpdateBingoInstanceEventTypeAsync(BingoInstanceEventType item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<BingoInstanceEventType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes/{item.BingoInstanceEventTypeId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<Company>> UpdateCompanyAsync(Company item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<Company>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Companies/{item.CompanyId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<FrequencyType>> UpdateFrequencyTypeAsync(FrequencyType item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<FrequencyType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FrequencyTypes/{item.FrequencyTypeId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<Meeting>> UpdateMeetingAsync(Meeting item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<Meeting>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Meetings/{item.MeetingId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<MeetingAttendee>> UpdateMeetingAttendeeAsync(MeetingAttendee item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<MeetingAttendee>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}MeetingAttendees/{item.MeetingAttendeeId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<MeetingSchedule>> UpdateMeetingScheduleAsync(MeetingSchedule item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<MeetingSchedule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}MeetingSchedules/{item.MeetingScheduleId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<NotificationMethodType>> UpdateNotificationMethodTypeAsync(NotificationMethodType item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<NotificationMethodType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes/{item.NotificationMethodTypeId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<NotificationRule>> UpdateNotificationRuleAsync(NotificationRule item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<NotificationRule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationRules/{item.NotificationRuleId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<RecurrenceRule>> UpdateRecurrenceRuleAsync(RecurrenceRule item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<RecurrenceRule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}RecurrenceRules/{item.RecurrenceRuleId}", item);
				return retVal;
			}

			public async Task<HttpCallResult<User>> UpdateUserAsync(User item)
			{
				var retVal = await SerializationHelper.SerializeCallResultsPut<User>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Users/{item.UserId}", item);
				return retVal;
			}

			#endregion Update

			#region Delete

			public async Task<HttpCallResult<BingoContent>> DeleteBingoContentAsync(System.Guid bingoContentId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<BingoContent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoContents/{bingoContentId}");
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstance>> DeleteBingoInstanceAsync(System.Guid bingoInstanceId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<BingoInstance>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstances/{bingoInstanceId}");
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceContent>> DeleteBingoInstanceContentAsync(System.Guid bingoInstanceContentId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<BingoInstanceContent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents/{bingoInstanceContentId}");
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceEvent>> DeleteBingoInstanceEventAsync(System.Guid bingoInstanceEventId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<BingoInstanceEvent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents/{bingoInstanceEventId}");
				return retVal;
			}

			public async Task<HttpCallResult<BingoInstanceEventType>> DeleteBingoInstanceEventTypeAsync(int bingoInstanceEventTypeId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<BingoInstanceEventType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes/{bingoInstanceEventTypeId}");
				return retVal;
			}

			public async Task<HttpCallResult<Company>> DeleteCompanyAsync(System.Guid companyId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<Company>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Companies/{companyId}");
				return retVal;
			}

			public async Task<HttpCallResult<FrequencyType>> DeleteFrequencyTypeAsync(int frequencyTypeId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<FrequencyType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FrequencyTypes/{frequencyTypeId}");
				return retVal;
			}

			public async Task<HttpCallResult<Meeting>> DeleteMeetingAsync(System.Guid meetingId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<Meeting>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Meetings/{meetingId}");
				return retVal;
			}

			public async Task<HttpCallResult<MeetingAttendee>> DeleteMeetingAttendeeAsync(System.Guid meetingAttendeeId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<MeetingAttendee>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingAttendees/{meetingAttendeeId}");
				return retVal;
			}

			public async Task<HttpCallResult<MeetingSchedule>> DeleteMeetingScheduleAsync(System.Guid meetingScheduleId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<MeetingSchedule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingSchedules/{meetingScheduleId}");
				return retVal;
			}

			public async Task<HttpCallResult<NotificationMethodType>> DeleteNotificationMethodTypeAsync(int notificationMethodTypeId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<NotificationMethodType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes/{notificationMethodTypeId}");
				return retVal;
			}

			public async Task<HttpCallResult<NotificationRule>> DeleteNotificationRuleAsync(System.Guid notificationRuleId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<NotificationRule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationRules/{notificationRuleId}");
				return retVal;
			}

			public async Task<HttpCallResult<RecurrenceRule>> DeleteRecurrenceRuleAsync(System.Guid recurrenceRuleId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<RecurrenceRule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RecurrenceRules/{recurrenceRuleId}");
				return retVal;
			}

			public async Task<HttpCallResult<User>> DeleteUserAsync(System.Guid userId)
			{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<User>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users/{userId}");
				return retVal;
			}

			#endregion Delete
	}
}
