// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MSC.BingoBuzz.Repository.Entities.BB
{

    // RecurrenceRule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class RecurrenceRuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RecurrenceRule>
    {
        public RecurrenceRuleConfiguration()
            : this("dbo")
        {
        }

        public RecurrenceRuleConfiguration(string schema)
        {
            ToTable("RecurrenceRule", schema);
            HasKey(x => x.RecurrenceRuleId);

            Property(x => x.RecurrenceRuleId).HasColumnName(@"RecurrenceRuleId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FrequencyTypeId).HasColumnName(@"FrequencyTypeId").HasColumnType("int").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.Seconds).HasColumnName(@"Seconds").HasColumnType("int").IsOptional();
            Property(x => x.Minutes).HasColumnName(@"Minutes").HasColumnType("int").IsOptional();
            Property(x => x.Hour).HasColumnName(@"Hour").HasColumnType("int").IsOptional();
            Property(x => x.WeekDayNum).HasColumnName(@"WeekDayNum").HasColumnType("int").IsOptional();
            Property(x => x.OrdWeek).HasColumnName(@"OrdWeek").HasColumnType("int").IsOptional();
            Property(x => x.WeekDay).HasColumnName(@"WeekDay").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.FrequencyType).WithMany(b => b.RecurrenceRules).HasForeignKey(c => c.FrequencyTypeId).WillCascadeOnDelete(false); // FK_RecurrenceRule_FrequencyType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
