// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MSC.BingoBuzz.Repository.Entities.BB
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class BBDataContext : System.Data.Entity.DbContext, IBBDataContext
    {
        public System.Data.Entity.DbSet<BingoContent> BingoContents { get; set; } // BingoContent
        public System.Data.Entity.DbSet<BingoInstance> BingoInstances { get; set; } // BingoInstance
        public System.Data.Entity.DbSet<BingoInstanceContent> BingoInstanceContents { get; set; } // BingoInstanceContent
        public System.Data.Entity.DbSet<BingoInstanceEvent> BingoInstanceEvents { get; set; } // BingoInstanceEvent
        public System.Data.Entity.DbSet<BingoInstanceEventType> BingoInstanceEventTypes { get; set; } // BingoInstanceEventType
        public System.Data.Entity.DbSet<Company> Companies { get; set; } // Company
        public System.Data.Entity.DbSet<FrequencyType> FrequencyTypes { get; set; } // FrequencyType
        public System.Data.Entity.DbSet<Meeting> Meetings { get; set; } // Meeting
        public System.Data.Entity.DbSet<MeetingAttendee> MeetingAttendees { get; set; } // MeetingAttendee
        public System.Data.Entity.DbSet<MeetingSchedule> MeetingSchedules { get; set; } // MeetingSchedule
        public System.Data.Entity.DbSet<NotificationMethodType> NotificationMethodTypes { get; set; } // NotificationMethodType
        public System.Data.Entity.DbSet<NotificationRule> NotificationRules { get; set; } // NotificationRule
        public System.Data.Entity.DbSet<RecurrenceRule> RecurrenceRules { get; set; } // RecurrenceRule
        public System.Data.Entity.DbSet<User> Users { get; set; } // User

        static BBDataContext()
        {
            System.Data.Entity.Database.SetInitializer<BBDataContext>(null);
        }

        public BBDataContext()
            : base("Name=BingoBuzz")
        {
            InitializePartial();
        }

        public BBDataContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public BBDataContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public BBDataContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public BBDataContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BingoContentConfiguration());
            modelBuilder.Configurations.Add(new BingoInstanceConfiguration());
            modelBuilder.Configurations.Add(new BingoInstanceContentConfiguration());
            modelBuilder.Configurations.Add(new BingoInstanceEventConfiguration());
            modelBuilder.Configurations.Add(new BingoInstanceEventTypeConfiguration());
            modelBuilder.Configurations.Add(new CompanyConfiguration());
            modelBuilder.Configurations.Add(new FrequencyTypeConfiguration());
            modelBuilder.Configurations.Add(new MeetingConfiguration());
            modelBuilder.Configurations.Add(new MeetingAttendeeConfiguration());
            modelBuilder.Configurations.Add(new MeetingScheduleConfiguration());
            modelBuilder.Configurations.Add(new NotificationMethodTypeConfiguration());
            modelBuilder.Configurations.Add(new NotificationRuleConfiguration());
            modelBuilder.Configurations.Add(new RecurrenceRuleConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BingoContentConfiguration(schema));
            modelBuilder.Configurations.Add(new BingoInstanceConfiguration(schema));
            modelBuilder.Configurations.Add(new BingoInstanceContentConfiguration(schema));
            modelBuilder.Configurations.Add(new BingoInstanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new BingoInstanceEventTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new FrequencyTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MeetingConfiguration(schema));
            modelBuilder.Configurations.Add(new MeetingAttendeeConfiguration(schema));
            modelBuilder.Configurations.Add(new MeetingScheduleConfiguration(schema));
            modelBuilder.Configurations.Add(new NotificationMethodTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new NotificationRuleConfiguration(schema));
            modelBuilder.Configurations.Add(new RecurrenceRuleConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
}
// </auto-generated>
