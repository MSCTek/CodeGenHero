// <auto-generated> - Template:RepositoryBasePartialMethods, Version:1.1, Id:ee9fed0b-0773-4b23-a17f-a9fb2004f9be
using System;
using System.Data.Entity;
using System.Linq;
using entBB = CodeGenHero.BingoBuzz.Repository.Entities.BB;
using CodeGenHero.BingoBuzz.Repository.Interface;
using CodeGenHero.Repository;

namespace CodeGenHero.BingoBuzz.Repository
{
	public abstract partial class BBRepositoryBase : IBBRepositoryCrud
	{

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_BingoContent(ref IQueryable<entBB.BingoContent> qryItem, System.Guid bingoContentId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking();
				 // .Include(x => x.BingoInstanceContents).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_BingoContent(ref entBB.BingoContent dbItem, System.Guid bingoContentId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_BingoInstance(ref IQueryable<entBB.BingoInstance> qryItem, System.Guid bingoInstanceId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.BingoInstanceStatusType).AsNoTracking()
				 .Include(x => x.Meeting).AsNoTracking()
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking()
				 .Include(x => x.BingoInstanceContents).AsNoTracking()
				 .Include(x => x.BingoInstanceEvents).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_BingoInstance(ref entBB.BingoInstance dbItem, System.Guid bingoInstanceId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceContent(ref IQueryable<entBB.BingoInstanceContent> qryItem, System.Guid bingoInstanceContentId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.BingoContent).AsNoTracking()
				 // .Include(x => x.BingoInstance).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.BingoInstanceContentStatusType).AsNoTracking()
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking()
				 .Include(x => x.User_UserId).AsNoTracking()
				 .Include(x => x.BingoInstanceEvents).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_BingoInstanceContent(ref entBB.BingoInstanceContent dbItem, System.Guid bingoInstanceContentId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceContentStatusType(ref IQueryable<entBB.BingoInstanceContentStatusType> qryItem, int bingoInstanceContentStatusTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.BingoInstanceContents).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_BingoInstanceContentStatusType(ref entBB.BingoInstanceContentStatusType dbItem, int bingoInstanceContentStatusTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceEvent(ref IQueryable<entBB.BingoInstanceEvent> qryItem, System.Guid bingoInstanceEventId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 // .Include(x => x.BingoInstance).AsNoTracking() -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoInstanceContent).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.BingoInstanceEventType).AsNoTracking()
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_BingoInstanceEvent(ref entBB.BingoInstanceEvent dbItem, System.Guid bingoInstanceEventId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceEventType(ref IQueryable<entBB.BingoInstanceEventType> qryItem, int bingoInstanceEventTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.BingoInstanceEvents).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_BingoInstanceEventType(ref entBB.BingoInstanceEventType dbItem, int bingoInstanceEventTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceStatusType(ref IQueryable<entBB.BingoInstanceStatusType> qryItem, int bingoInstanceStatusTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.BingoInstances).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_BingoInstanceStatusType(ref entBB.BingoInstanceStatusType dbItem, int bingoInstanceStatusTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_Company(ref IQueryable<entBB.Company> qryItem, System.Guid companyId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking();
				 // .Include(x => x.Meetings).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_Company(ref entBB.Company dbItem, System.Guid companyId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_FrequencyType(ref IQueryable<entBB.FrequencyType> qryItem, int frequencyTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.RecurrenceRules).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_FrequencyType(ref entBB.FrequencyType dbItem, int frequencyTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_Meeting(ref IQueryable<entBB.Meeting> qryItem, System.Guid meetingId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.Company).AsNoTracking()
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking()
				 // .Include(x => x.BingoInstances).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.MeetingAttendees).AsNoTracking()
				 .Include(x => x.MeetingSchedules).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_Meeting(ref entBB.Meeting dbItem, System.Guid meetingId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_MeetingAttendee(ref IQueryable<entBB.MeetingAttendee> qryItem, System.Guid meetingAttendeeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 // .Include(x => x.Meeting).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.NotificationRule).AsNoTracking()
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking()
				 .Include(x => x.User_UserId).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_MeetingAttendee(ref entBB.MeetingAttendee dbItem, System.Guid meetingAttendeeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_MeetingSchedule(ref IQueryable<entBB.MeetingSchedule> qryItem, System.Guid meetingScheduleId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 // .Include(x => x.Meeting).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.RecurrenceRule).AsNoTracking()
				 .Include(x => x.CreatedUser).AsNoTracking()
				 .Include(x => x.UpdatedUser).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_MeetingSchedule(ref entBB.MeetingSchedule dbItem, System.Guid meetingScheduleId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_NotificationMethodType(ref IQueryable<entBB.NotificationMethodType> qryItem, int notificationMethodTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.NotificationRules).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_NotificationMethodType(ref entBB.NotificationMethodType dbItem, int notificationMethodTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_NotificationRule(ref IQueryable<entBB.NotificationRule> qryItem, System.Guid notificationRuleId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.NotificationMethodType).AsNoTracking();
				 // .Include(x => x.MeetingAttendees).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_NotificationRule(ref entBB.NotificationRule dbItem, System.Guid notificationRuleId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_RecurrenceRule(ref IQueryable<entBB.RecurrenceRule> qryItem, System.Guid recurrenceRuleId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.FrequencyType).AsNoTracking();
				 // .Include(x => x.MeetingSchedules).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_RecurrenceRule(ref entBB.RecurrenceRule dbItem, System.Guid recurrenceRuleId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_User(ref IQueryable<entBB.User> qryItem, System.Guid userId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.User_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.User_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoContents_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.CreatedUser).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoInstances_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoInstances_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoInstanceContents_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoInstanceContents_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoInstanceContents_UserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoInstanceEvents_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.BingoInstanceEvents_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.Companies_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.Companies_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.Meetings_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.Meetings_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.MeetingAttendees_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.MeetingAttendees_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.MeetingAttendees_UserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.MeetingSchedules_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.MeetingSchedules_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.Users_CreatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.Users_UpdatedUserId).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_User(ref entBB.User dbItem, System.Guid userId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.BBDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }
	}
}

