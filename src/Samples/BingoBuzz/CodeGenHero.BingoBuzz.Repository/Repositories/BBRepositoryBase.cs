// <auto-generated> - Template:RepositoryBase, Version:1.1, Id:70230bd4-f88f-41d8-a9c6-6e40aded5c07
using System;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using CodeGenHero.BingoBuzz.Repository.Entities.BB;
using CodeGenHero.BingoBuzz.Repository.Interface;
using CodeGenHero.Repository;
using cghEnums = CodeGenHero.Repository.Enums;

namespace CodeGenHero.BingoBuzz.Repository
{
	public abstract partial class BBRepositoryBase : IBBRepositoryCrud
	{
		private BBDataContext _ctx;

		public BBRepositoryBase(BBDataContext ctx)
		{
			_ctx = ctx;

			// Disable lazy loading - if not, related properties are auto-loaded when
			// they are accessed for the first time, which means they'll be included when
			// we serialize (b/c the serialization process accesses those properties).

			// We don't want that, so we turn it off.  We want to eagerly load them (using Include) manually.

			ctx.Configuration.LazyLoadingEnabled = false;

			if (System.Diagnostics.Debugger.IsAttached)
			{   // Write EF queries to the output console.
				ctx.Database.Log = x => System.Diagnostics.Debug.WriteLine(x);
			}
		}

		#region Generic Operations

		private async Task<IRepositoryActionResult<TEntity>> DeleteAsync<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				if (item == null)
				{
					return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.NotFound);
				}

				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Remove(item);
				await _ctx.SaveChangesAsync();
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Deleted);
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		public IQueryable<TEntity> GetQueryable<TEntity>() where TEntity : class
		{
			return _ctx.Set<TEntity>();
		}

		public async Task<IRepositoryActionResult<TEntity>> InsertAsync<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Add(item);
				var result = await _ctx.SaveChangesAsync();
				RunCustomLogicAfterEveryInsert<TEntity>(item, result);

				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.Created);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		private async Task<IRepositoryActionResult<TEntity>> UpdateAsync<TEntity>(TEntity item, TEntity existingItem) where TEntity : class
		{
			try
			{ // only update when a record already exists for this id
				if (existingItem == null)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NotFound);
				}

				// change the original entity status to detached; otherwise, we get an error on attach as the entity is already in the dbSet
				// set original entity state to detached
				_ctx.Entry(existingItem).State = EntityState.Detached;
				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Attach(item); // attach & save
				_ctx.Entry(item).State = EntityState.Modified; // set the updated entity state to modified, so it gets updated.

				var result = await _ctx.SaveChangesAsync();
				RunCustomLogicAfterEveryUpdate<TEntity>(newItem: item, oldItem: existingItem, numObjectsWritten: result);

				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.Updated);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch (Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		partial void RunCustomLogicAfterEveryInsert<T>(T item, int numObjectsWritten) where T : class;

		partial void RunCustomLogicAfterEveryUpdate<T>(T newItem, T oldItem, int numObjectsWritten) where T : class;

		#endregion Generic Operations

		#region BingoContent

		public async Task<IRepositoryActionResult<BingoContent>> InsertAsync(BingoContent item)
		{
			var result = await InsertAsync<BingoContent>(item);
			RunCustomLogicAfterInsert_BingoContent(item, result);

			return result;
		}


		public IQueryable<BingoContent> GetQueryable_BingoContent()
		{
			return _ctx.Set<BingoContent>();
		}

			public async Task<BingoContent> Get_BingoContentAsync(System.Guid bingoContentId, int numChildLevels)
			{
				var qryItem = GetQueryable_BingoContent().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BingoContent(ref qryItem, bingoContentId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BingoContentId == bingoContentId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BingoContent(ref dbItem, bingoContentId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BingoContent> GetFirstOrDefaultAsync(BingoContent item)
			{
				return await _ctx.BingoContents.Where(x => x.BingoContentId == item.BingoContentId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BingoContent>> UpdateAsync(BingoContent item)
		{
			var oldItem = await _ctx.BingoContents.FirstOrDefaultAsync(x => x.BingoContentId == item.BingoContentId);
			var result = await UpdateAsync<BingoContent>(item, oldItem);
			RunCustomLogicAfterUpdate_BingoContent(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BingoContent>> Delete_BingoContentAsync(System.Guid bingoContentId)
			{
				return await DeleteAsync<BingoContent>(_ctx.BingoContents.Where(x => x.BingoContentId == bingoContentId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BingoContent>> DeleteAsync(BingoContent item)
			{
				return await DeleteAsync<BingoContent>(_ctx.BingoContents.Where(x => x.BingoContentId == item.BingoContentId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BingoContent(BingoContent item, IRepositoryActionResult<BingoContent> result);

		partial void RunCustomLogicAfterUpdate_BingoContent(BingoContent newItem, BingoContent oldItem, IRepositoryActionResult<BingoContent> result);

		partial void RunCustomLogicOnGetQueryableByPK_BingoContent(ref IQueryable<BingoContent> qryItem, System.Guid bingoContentId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BingoContent(ref BingoContent dbItem, System.Guid bingoContentId, int numChildLevels);



		#endregion BingoContent

		#region BingoInstance

		public async Task<IRepositoryActionResult<BingoInstance>> InsertAsync(BingoInstance item)
		{
			var result = await InsertAsync<BingoInstance>(item);
			RunCustomLogicAfterInsert_BingoInstance(item, result);

			return result;
		}


		public IQueryable<BingoInstance> GetQueryable_BingoInstance()
		{
			return _ctx.Set<BingoInstance>();
		}

			public async Task<BingoInstance> Get_BingoInstanceAsync(System.Guid bingoInstanceId, int numChildLevels)
			{
				var qryItem = GetQueryable_BingoInstance().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BingoInstance(ref qryItem, bingoInstanceId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BingoInstanceId == bingoInstanceId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BingoInstance(ref dbItem, bingoInstanceId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BingoInstance> GetFirstOrDefaultAsync(BingoInstance item)
			{
				return await _ctx.BingoInstances.Where(x => x.BingoInstanceId == item.BingoInstanceId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BingoInstance>> UpdateAsync(BingoInstance item)
		{
			var oldItem = await _ctx.BingoInstances.FirstOrDefaultAsync(x => x.BingoInstanceId == item.BingoInstanceId);
			var result = await UpdateAsync<BingoInstance>(item, oldItem);
			RunCustomLogicAfterUpdate_BingoInstance(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BingoInstance>> Delete_BingoInstanceAsync(System.Guid bingoInstanceId)
			{
				return await DeleteAsync<BingoInstance>(_ctx.BingoInstances.Where(x => x.BingoInstanceId == bingoInstanceId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BingoInstance>> DeleteAsync(BingoInstance item)
			{
				return await DeleteAsync<BingoInstance>(_ctx.BingoInstances.Where(x => x.BingoInstanceId == item.BingoInstanceId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BingoInstance(BingoInstance item, IRepositoryActionResult<BingoInstance> result);

		partial void RunCustomLogicAfterUpdate_BingoInstance(BingoInstance newItem, BingoInstance oldItem, IRepositoryActionResult<BingoInstance> result);

		partial void RunCustomLogicOnGetQueryableByPK_BingoInstance(ref IQueryable<BingoInstance> qryItem, System.Guid bingoInstanceId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BingoInstance(ref BingoInstance dbItem, System.Guid bingoInstanceId, int numChildLevels);



		#endregion BingoInstance

		#region BingoInstanceContent

		public async Task<IRepositoryActionResult<BingoInstanceContent>> InsertAsync(BingoInstanceContent item)
		{
			var result = await InsertAsync<BingoInstanceContent>(item);
			RunCustomLogicAfterInsert_BingoInstanceContent(item, result);

			return result;
		}


		public IQueryable<BingoInstanceContent> GetQueryable_BingoInstanceContent()
		{
			return _ctx.Set<BingoInstanceContent>();
		}

			public async Task<BingoInstanceContent> Get_BingoInstanceContentAsync(System.Guid bingoInstanceContentId, int numChildLevels)
			{
				var qryItem = GetQueryable_BingoInstanceContent().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BingoInstanceContent(ref qryItem, bingoInstanceContentId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BingoInstanceContentId == bingoInstanceContentId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BingoInstanceContent(ref dbItem, bingoInstanceContentId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BingoInstanceContent> GetFirstOrDefaultAsync(BingoInstanceContent item)
			{
				return await _ctx.BingoInstanceContents.Where(x => x.BingoInstanceContentId == item.BingoInstanceContentId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BingoInstanceContent>> UpdateAsync(BingoInstanceContent item)
		{
			var oldItem = await _ctx.BingoInstanceContents.FirstOrDefaultAsync(x => x.BingoInstanceContentId == item.BingoInstanceContentId);
			var result = await UpdateAsync<BingoInstanceContent>(item, oldItem);
			RunCustomLogicAfterUpdate_BingoInstanceContent(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BingoInstanceContent>> Delete_BingoInstanceContentAsync(System.Guid bingoInstanceContentId)
			{
				return await DeleteAsync<BingoInstanceContent>(_ctx.BingoInstanceContents.Where(x => x.BingoInstanceContentId == bingoInstanceContentId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BingoInstanceContent>> DeleteAsync(BingoInstanceContent item)
			{
				return await DeleteAsync<BingoInstanceContent>(_ctx.BingoInstanceContents.Where(x => x.BingoInstanceContentId == item.BingoInstanceContentId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BingoInstanceContent(BingoInstanceContent item, IRepositoryActionResult<BingoInstanceContent> result);

		partial void RunCustomLogicAfterUpdate_BingoInstanceContent(BingoInstanceContent newItem, BingoInstanceContent oldItem, IRepositoryActionResult<BingoInstanceContent> result);

		partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceContent(ref IQueryable<BingoInstanceContent> qryItem, System.Guid bingoInstanceContentId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BingoInstanceContent(ref BingoInstanceContent dbItem, System.Guid bingoInstanceContentId, int numChildLevels);



		#endregion BingoInstanceContent

		#region BingoInstanceContentStatusType

		public async Task<IRepositoryActionResult<BingoInstanceContentStatusType>> InsertAsync(BingoInstanceContentStatusType item)
		{
			var result = await InsertAsync<BingoInstanceContentStatusType>(item);
			RunCustomLogicAfterInsert_BingoInstanceContentStatusType(item, result);

			return result;
		}


		public IQueryable<BingoInstanceContentStatusType> GetQueryable_BingoInstanceContentStatusType()
		{
			return _ctx.Set<BingoInstanceContentStatusType>();
		}

			public async Task<BingoInstanceContentStatusType> Get_BingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_BingoInstanceContentStatusType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BingoInstanceContentStatusType(ref qryItem, bingoInstanceContentStatusTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BingoInstanceContentStatusTypeId == bingoInstanceContentStatusTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BingoInstanceContentStatusType(ref dbItem, bingoInstanceContentStatusTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BingoInstanceContentStatusType> GetFirstOrDefaultAsync(BingoInstanceContentStatusType item)
			{
				return await _ctx.BingoInstanceContentStatusTypes.Where(x => x.BingoInstanceContentStatusTypeId == item.BingoInstanceContentStatusTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BingoInstanceContentStatusType>> UpdateAsync(BingoInstanceContentStatusType item)
		{
			var oldItem = await _ctx.BingoInstanceContentStatusTypes.FirstOrDefaultAsync(x => x.BingoInstanceContentStatusTypeId == item.BingoInstanceContentStatusTypeId);
			var result = await UpdateAsync<BingoInstanceContentStatusType>(item, oldItem);
			RunCustomLogicAfterUpdate_BingoInstanceContentStatusType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BingoInstanceContentStatusType>> Delete_BingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId)
			{
				return await DeleteAsync<BingoInstanceContentStatusType>(_ctx.BingoInstanceContentStatusTypes.Where(x => x.BingoInstanceContentStatusTypeId == bingoInstanceContentStatusTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BingoInstanceContentStatusType>> DeleteAsync(BingoInstanceContentStatusType item)
			{
				return await DeleteAsync<BingoInstanceContentStatusType>(_ctx.BingoInstanceContentStatusTypes.Where(x => x.BingoInstanceContentStatusTypeId == item.BingoInstanceContentStatusTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BingoInstanceContentStatusType(BingoInstanceContentStatusType item, IRepositoryActionResult<BingoInstanceContentStatusType> result);

		partial void RunCustomLogicAfterUpdate_BingoInstanceContentStatusType(BingoInstanceContentStatusType newItem, BingoInstanceContentStatusType oldItem, IRepositoryActionResult<BingoInstanceContentStatusType> result);

		partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceContentStatusType(ref IQueryable<BingoInstanceContentStatusType> qryItem, int bingoInstanceContentStatusTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BingoInstanceContentStatusType(ref BingoInstanceContentStatusType dbItem, int bingoInstanceContentStatusTypeId, int numChildLevels);



		#endregion BingoInstanceContentStatusType

		#region BingoInstanceEvent

		public async Task<IRepositoryActionResult<BingoInstanceEvent>> InsertAsync(BingoInstanceEvent item)
		{
			var result = await InsertAsync<BingoInstanceEvent>(item);
			RunCustomLogicAfterInsert_BingoInstanceEvent(item, result);

			return result;
		}


		public IQueryable<BingoInstanceEvent> GetQueryable_BingoInstanceEvent()
		{
			return _ctx.Set<BingoInstanceEvent>();
		}

			public async Task<BingoInstanceEvent> Get_BingoInstanceEventAsync(System.Guid bingoInstanceEventId, int numChildLevels)
			{
				var qryItem = GetQueryable_BingoInstanceEvent().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BingoInstanceEvent(ref qryItem, bingoInstanceEventId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BingoInstanceEventId == bingoInstanceEventId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BingoInstanceEvent(ref dbItem, bingoInstanceEventId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BingoInstanceEvent> GetFirstOrDefaultAsync(BingoInstanceEvent item)
			{
				return await _ctx.BingoInstanceEvents.Where(x => x.BingoInstanceEventId == item.BingoInstanceEventId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BingoInstanceEvent>> UpdateAsync(BingoInstanceEvent item)
		{
			var oldItem = await _ctx.BingoInstanceEvents.FirstOrDefaultAsync(x => x.BingoInstanceEventId == item.BingoInstanceEventId);
			var result = await UpdateAsync<BingoInstanceEvent>(item, oldItem);
			RunCustomLogicAfterUpdate_BingoInstanceEvent(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BingoInstanceEvent>> Delete_BingoInstanceEventAsync(System.Guid bingoInstanceEventId)
			{
				return await DeleteAsync<BingoInstanceEvent>(_ctx.BingoInstanceEvents.Where(x => x.BingoInstanceEventId == bingoInstanceEventId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BingoInstanceEvent>> DeleteAsync(BingoInstanceEvent item)
			{
				return await DeleteAsync<BingoInstanceEvent>(_ctx.BingoInstanceEvents.Where(x => x.BingoInstanceEventId == item.BingoInstanceEventId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BingoInstanceEvent(BingoInstanceEvent item, IRepositoryActionResult<BingoInstanceEvent> result);

		partial void RunCustomLogicAfterUpdate_BingoInstanceEvent(BingoInstanceEvent newItem, BingoInstanceEvent oldItem, IRepositoryActionResult<BingoInstanceEvent> result);

		partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceEvent(ref IQueryable<BingoInstanceEvent> qryItem, System.Guid bingoInstanceEventId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BingoInstanceEvent(ref BingoInstanceEvent dbItem, System.Guid bingoInstanceEventId, int numChildLevels);



		#endregion BingoInstanceEvent

		#region BingoInstanceEventType

		public async Task<IRepositoryActionResult<BingoInstanceEventType>> InsertAsync(BingoInstanceEventType item)
		{
			var result = await InsertAsync<BingoInstanceEventType>(item);
			RunCustomLogicAfterInsert_BingoInstanceEventType(item, result);

			return result;
		}


		public IQueryable<BingoInstanceEventType> GetQueryable_BingoInstanceEventType()
		{
			return _ctx.Set<BingoInstanceEventType>();
		}

			public async Task<BingoInstanceEventType> Get_BingoInstanceEventTypeAsync(int bingoInstanceEventTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_BingoInstanceEventType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BingoInstanceEventType(ref qryItem, bingoInstanceEventTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BingoInstanceEventTypeId == bingoInstanceEventTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BingoInstanceEventType(ref dbItem, bingoInstanceEventTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BingoInstanceEventType> GetFirstOrDefaultAsync(BingoInstanceEventType item)
			{
				return await _ctx.BingoInstanceEventTypes.Where(x => x.BingoInstanceEventTypeId == item.BingoInstanceEventTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BingoInstanceEventType>> UpdateAsync(BingoInstanceEventType item)
		{
			var oldItem = await _ctx.BingoInstanceEventTypes.FirstOrDefaultAsync(x => x.BingoInstanceEventTypeId == item.BingoInstanceEventTypeId);
			var result = await UpdateAsync<BingoInstanceEventType>(item, oldItem);
			RunCustomLogicAfterUpdate_BingoInstanceEventType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BingoInstanceEventType>> Delete_BingoInstanceEventTypeAsync(int bingoInstanceEventTypeId)
			{
				return await DeleteAsync<BingoInstanceEventType>(_ctx.BingoInstanceEventTypes.Where(x => x.BingoInstanceEventTypeId == bingoInstanceEventTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BingoInstanceEventType>> DeleteAsync(BingoInstanceEventType item)
			{
				return await DeleteAsync<BingoInstanceEventType>(_ctx.BingoInstanceEventTypes.Where(x => x.BingoInstanceEventTypeId == item.BingoInstanceEventTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BingoInstanceEventType(BingoInstanceEventType item, IRepositoryActionResult<BingoInstanceEventType> result);

		partial void RunCustomLogicAfterUpdate_BingoInstanceEventType(BingoInstanceEventType newItem, BingoInstanceEventType oldItem, IRepositoryActionResult<BingoInstanceEventType> result);

		partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceEventType(ref IQueryable<BingoInstanceEventType> qryItem, int bingoInstanceEventTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BingoInstanceEventType(ref BingoInstanceEventType dbItem, int bingoInstanceEventTypeId, int numChildLevels);



		#endregion BingoInstanceEventType

		#region BingoInstanceStatusType

		public async Task<IRepositoryActionResult<BingoInstanceStatusType>> InsertAsync(BingoInstanceStatusType item)
		{
			var result = await InsertAsync<BingoInstanceStatusType>(item);
			RunCustomLogicAfterInsert_BingoInstanceStatusType(item, result);

			return result;
		}


		public IQueryable<BingoInstanceStatusType> GetQueryable_BingoInstanceStatusType()
		{
			return _ctx.Set<BingoInstanceStatusType>();
		}

			public async Task<BingoInstanceStatusType> Get_BingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_BingoInstanceStatusType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BingoInstanceStatusType(ref qryItem, bingoInstanceStatusTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BingoInstanceStatusTypeId == bingoInstanceStatusTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BingoInstanceStatusType(ref dbItem, bingoInstanceStatusTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BingoInstanceStatusType> GetFirstOrDefaultAsync(BingoInstanceStatusType item)
			{
				return await _ctx.BingoInstanceStatusTypes.Where(x => x.BingoInstanceStatusTypeId == item.BingoInstanceStatusTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BingoInstanceStatusType>> UpdateAsync(BingoInstanceStatusType item)
		{
			var oldItem = await _ctx.BingoInstanceStatusTypes.FirstOrDefaultAsync(x => x.BingoInstanceStatusTypeId == item.BingoInstanceStatusTypeId);
			var result = await UpdateAsync<BingoInstanceStatusType>(item, oldItem);
			RunCustomLogicAfterUpdate_BingoInstanceStatusType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BingoInstanceStatusType>> Delete_BingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId)
			{
				return await DeleteAsync<BingoInstanceStatusType>(_ctx.BingoInstanceStatusTypes.Where(x => x.BingoInstanceStatusTypeId == bingoInstanceStatusTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BingoInstanceStatusType>> DeleteAsync(BingoInstanceStatusType item)
			{
				return await DeleteAsync<BingoInstanceStatusType>(_ctx.BingoInstanceStatusTypes.Where(x => x.BingoInstanceStatusTypeId == item.BingoInstanceStatusTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BingoInstanceStatusType(BingoInstanceStatusType item, IRepositoryActionResult<BingoInstanceStatusType> result);

		partial void RunCustomLogicAfterUpdate_BingoInstanceStatusType(BingoInstanceStatusType newItem, BingoInstanceStatusType oldItem, IRepositoryActionResult<BingoInstanceStatusType> result);

		partial void RunCustomLogicOnGetQueryableByPK_BingoInstanceStatusType(ref IQueryable<BingoInstanceStatusType> qryItem, int bingoInstanceStatusTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BingoInstanceStatusType(ref BingoInstanceStatusType dbItem, int bingoInstanceStatusTypeId, int numChildLevels);



		#endregion BingoInstanceStatusType

		#region Company

		public async Task<IRepositoryActionResult<Company>> InsertAsync(Company item)
		{
			var result = await InsertAsync<Company>(item);
			RunCustomLogicAfterInsert_Company(item, result);

			return result;
		}


		public IQueryable<Company> GetQueryable_Company()
		{
			return _ctx.Set<Company>();
		}

			public async Task<Company> Get_CompanyAsync(System.Guid companyId, int numChildLevels)
			{
				var qryItem = GetQueryable_Company().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Company(ref qryItem, companyId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.CompanyId == companyId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Company(ref dbItem, companyId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Company> GetFirstOrDefaultAsync(Company item)
			{
				return await _ctx.Companies.Where(x => x.CompanyId == item.CompanyId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Company>> UpdateAsync(Company item)
		{
			var oldItem = await _ctx.Companies.FirstOrDefaultAsync(x => x.CompanyId == item.CompanyId);
			var result = await UpdateAsync<Company>(item, oldItem);
			RunCustomLogicAfterUpdate_Company(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Company>> Delete_CompanyAsync(System.Guid companyId)
			{
				return await DeleteAsync<Company>(_ctx.Companies.Where(x => x.CompanyId == companyId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Company>> DeleteAsync(Company item)
			{
				return await DeleteAsync<Company>(_ctx.Companies.Where(x => x.CompanyId == item.CompanyId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Company(Company item, IRepositoryActionResult<Company> result);

		partial void RunCustomLogicAfterUpdate_Company(Company newItem, Company oldItem, IRepositoryActionResult<Company> result);

		partial void RunCustomLogicOnGetQueryableByPK_Company(ref IQueryable<Company> qryItem, System.Guid companyId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Company(ref Company dbItem, System.Guid companyId, int numChildLevels);



		#endregion Company

		#region FrequencyType

		public async Task<IRepositoryActionResult<FrequencyType>> InsertAsync(FrequencyType item)
		{
			var result = await InsertAsync<FrequencyType>(item);
			RunCustomLogicAfterInsert_FrequencyType(item, result);

			return result;
		}


		public IQueryable<FrequencyType> GetQueryable_FrequencyType()
		{
			return _ctx.Set<FrequencyType>();
		}

			public async Task<FrequencyType> Get_FrequencyTypeAsync(int frequencyTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_FrequencyType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_FrequencyType(ref qryItem, frequencyTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FrequencyTypeId == frequencyTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_FrequencyType(ref dbItem, frequencyTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<FrequencyType> GetFirstOrDefaultAsync(FrequencyType item)
			{
				return await _ctx.FrequencyTypes.Where(x => x.FrequencyTypeId == item.FrequencyTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<FrequencyType>> UpdateAsync(FrequencyType item)
		{
			var oldItem = await _ctx.FrequencyTypes.FirstOrDefaultAsync(x => x.FrequencyTypeId == item.FrequencyTypeId);
			var result = await UpdateAsync<FrequencyType>(item, oldItem);
			RunCustomLogicAfterUpdate_FrequencyType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<FrequencyType>> Delete_FrequencyTypeAsync(int frequencyTypeId)
			{
				return await DeleteAsync<FrequencyType>(_ctx.FrequencyTypes.Where(x => x.FrequencyTypeId == frequencyTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<FrequencyType>> DeleteAsync(FrequencyType item)
			{
				return await DeleteAsync<FrequencyType>(_ctx.FrequencyTypes.Where(x => x.FrequencyTypeId == item.FrequencyTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_FrequencyType(FrequencyType item, IRepositoryActionResult<FrequencyType> result);

		partial void RunCustomLogicAfterUpdate_FrequencyType(FrequencyType newItem, FrequencyType oldItem, IRepositoryActionResult<FrequencyType> result);

		partial void RunCustomLogicOnGetQueryableByPK_FrequencyType(ref IQueryable<FrequencyType> qryItem, int frequencyTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_FrequencyType(ref FrequencyType dbItem, int frequencyTypeId, int numChildLevels);



		#endregion FrequencyType

		#region Meeting

		public async Task<IRepositoryActionResult<Meeting>> InsertAsync(Meeting item)
		{
			var result = await InsertAsync<Meeting>(item);
			RunCustomLogicAfterInsert_Meeting(item, result);

			return result;
		}


		public IQueryable<Meeting> GetQueryable_Meeting()
		{
			return _ctx.Set<Meeting>();
		}

			public async Task<Meeting> Get_MeetingAsync(System.Guid meetingId, int numChildLevels)
			{
				var qryItem = GetQueryable_Meeting().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Meeting(ref qryItem, meetingId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.MeetingId == meetingId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Meeting(ref dbItem, meetingId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Meeting> GetFirstOrDefaultAsync(Meeting item)
			{
				return await _ctx.Meetings.Where(x => x.MeetingId == item.MeetingId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Meeting>> UpdateAsync(Meeting item)
		{
			var oldItem = await _ctx.Meetings.FirstOrDefaultAsync(x => x.MeetingId == item.MeetingId);
			var result = await UpdateAsync<Meeting>(item, oldItem);
			RunCustomLogicAfterUpdate_Meeting(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Meeting>> Delete_MeetingAsync(System.Guid meetingId)
			{
				return await DeleteAsync<Meeting>(_ctx.Meetings.Where(x => x.MeetingId == meetingId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Meeting>> DeleteAsync(Meeting item)
			{
				return await DeleteAsync<Meeting>(_ctx.Meetings.Where(x => x.MeetingId == item.MeetingId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Meeting(Meeting item, IRepositoryActionResult<Meeting> result);

		partial void RunCustomLogicAfterUpdate_Meeting(Meeting newItem, Meeting oldItem, IRepositoryActionResult<Meeting> result);

		partial void RunCustomLogicOnGetQueryableByPK_Meeting(ref IQueryable<Meeting> qryItem, System.Guid meetingId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Meeting(ref Meeting dbItem, System.Guid meetingId, int numChildLevels);



		#endregion Meeting

		#region MeetingAttendee

		public async Task<IRepositoryActionResult<MeetingAttendee>> InsertAsync(MeetingAttendee item)
		{
			var result = await InsertAsync<MeetingAttendee>(item);
			RunCustomLogicAfterInsert_MeetingAttendee(item, result);

			return result;
		}


		public IQueryable<MeetingAttendee> GetQueryable_MeetingAttendee()
		{
			return _ctx.Set<MeetingAttendee>();
		}

			public async Task<MeetingAttendee> Get_MeetingAttendeeAsync(System.Guid meetingAttendeeId, int numChildLevels)
			{
				var qryItem = GetQueryable_MeetingAttendee().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_MeetingAttendee(ref qryItem, meetingAttendeeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.MeetingAttendeeId == meetingAttendeeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_MeetingAttendee(ref dbItem, meetingAttendeeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<MeetingAttendee> GetFirstOrDefaultAsync(MeetingAttendee item)
			{
				return await _ctx.MeetingAttendees.Where(x => x.MeetingAttendeeId == item.MeetingAttendeeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<MeetingAttendee>> UpdateAsync(MeetingAttendee item)
		{
			var oldItem = await _ctx.MeetingAttendees.FirstOrDefaultAsync(x => x.MeetingAttendeeId == item.MeetingAttendeeId);
			var result = await UpdateAsync<MeetingAttendee>(item, oldItem);
			RunCustomLogicAfterUpdate_MeetingAttendee(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<MeetingAttendee>> Delete_MeetingAttendeeAsync(System.Guid meetingAttendeeId)
			{
				return await DeleteAsync<MeetingAttendee>(_ctx.MeetingAttendees.Where(x => x.MeetingAttendeeId == meetingAttendeeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<MeetingAttendee>> DeleteAsync(MeetingAttendee item)
			{
				return await DeleteAsync<MeetingAttendee>(_ctx.MeetingAttendees.Where(x => x.MeetingAttendeeId == item.MeetingAttendeeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_MeetingAttendee(MeetingAttendee item, IRepositoryActionResult<MeetingAttendee> result);

		partial void RunCustomLogicAfterUpdate_MeetingAttendee(MeetingAttendee newItem, MeetingAttendee oldItem, IRepositoryActionResult<MeetingAttendee> result);

		partial void RunCustomLogicOnGetQueryableByPK_MeetingAttendee(ref IQueryable<MeetingAttendee> qryItem, System.Guid meetingAttendeeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_MeetingAttendee(ref MeetingAttendee dbItem, System.Guid meetingAttendeeId, int numChildLevels);



		#endregion MeetingAttendee

		#region MeetingSchedule

		public async Task<IRepositoryActionResult<MeetingSchedule>> InsertAsync(MeetingSchedule item)
		{
			var result = await InsertAsync<MeetingSchedule>(item);
			RunCustomLogicAfterInsert_MeetingSchedule(item, result);

			return result;
		}


		public IQueryable<MeetingSchedule> GetQueryable_MeetingSchedule()
		{
			return _ctx.Set<MeetingSchedule>();
		}

			public async Task<MeetingSchedule> Get_MeetingScheduleAsync(System.Guid meetingScheduleId, int numChildLevels)
			{
				var qryItem = GetQueryable_MeetingSchedule().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_MeetingSchedule(ref qryItem, meetingScheduleId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.MeetingScheduleId == meetingScheduleId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_MeetingSchedule(ref dbItem, meetingScheduleId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<MeetingSchedule> GetFirstOrDefaultAsync(MeetingSchedule item)
			{
				return await _ctx.MeetingSchedules.Where(x => x.MeetingScheduleId == item.MeetingScheduleId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<MeetingSchedule>> UpdateAsync(MeetingSchedule item)
		{
			var oldItem = await _ctx.MeetingSchedules.FirstOrDefaultAsync(x => x.MeetingScheduleId == item.MeetingScheduleId);
			var result = await UpdateAsync<MeetingSchedule>(item, oldItem);
			RunCustomLogicAfterUpdate_MeetingSchedule(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<MeetingSchedule>> Delete_MeetingScheduleAsync(System.Guid meetingScheduleId)
			{
				return await DeleteAsync<MeetingSchedule>(_ctx.MeetingSchedules.Where(x => x.MeetingScheduleId == meetingScheduleId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<MeetingSchedule>> DeleteAsync(MeetingSchedule item)
			{
				return await DeleteAsync<MeetingSchedule>(_ctx.MeetingSchedules.Where(x => x.MeetingScheduleId == item.MeetingScheduleId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_MeetingSchedule(MeetingSchedule item, IRepositoryActionResult<MeetingSchedule> result);

		partial void RunCustomLogicAfterUpdate_MeetingSchedule(MeetingSchedule newItem, MeetingSchedule oldItem, IRepositoryActionResult<MeetingSchedule> result);

		partial void RunCustomLogicOnGetQueryableByPK_MeetingSchedule(ref IQueryable<MeetingSchedule> qryItem, System.Guid meetingScheduleId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_MeetingSchedule(ref MeetingSchedule dbItem, System.Guid meetingScheduleId, int numChildLevels);



		#endregion MeetingSchedule

		#region NotificationMethodType

		public async Task<IRepositoryActionResult<NotificationMethodType>> InsertAsync(NotificationMethodType item)
		{
			var result = await InsertAsync<NotificationMethodType>(item);
			RunCustomLogicAfterInsert_NotificationMethodType(item, result);

			return result;
		}


		public IQueryable<NotificationMethodType> GetQueryable_NotificationMethodType()
		{
			return _ctx.Set<NotificationMethodType>();
		}

			public async Task<NotificationMethodType> Get_NotificationMethodTypeAsync(int notificationMethodTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_NotificationMethodType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_NotificationMethodType(ref qryItem, notificationMethodTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.NotificationMethodTypeId == notificationMethodTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_NotificationMethodType(ref dbItem, notificationMethodTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<NotificationMethodType> GetFirstOrDefaultAsync(NotificationMethodType item)
			{
				return await _ctx.NotificationMethodTypes.Where(x => x.NotificationMethodTypeId == item.NotificationMethodTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<NotificationMethodType>> UpdateAsync(NotificationMethodType item)
		{
			var oldItem = await _ctx.NotificationMethodTypes.FirstOrDefaultAsync(x => x.NotificationMethodTypeId == item.NotificationMethodTypeId);
			var result = await UpdateAsync<NotificationMethodType>(item, oldItem);
			RunCustomLogicAfterUpdate_NotificationMethodType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<NotificationMethodType>> Delete_NotificationMethodTypeAsync(int notificationMethodTypeId)
			{
				return await DeleteAsync<NotificationMethodType>(_ctx.NotificationMethodTypes.Where(x => x.NotificationMethodTypeId == notificationMethodTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<NotificationMethodType>> DeleteAsync(NotificationMethodType item)
			{
				return await DeleteAsync<NotificationMethodType>(_ctx.NotificationMethodTypes.Where(x => x.NotificationMethodTypeId == item.NotificationMethodTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_NotificationMethodType(NotificationMethodType item, IRepositoryActionResult<NotificationMethodType> result);

		partial void RunCustomLogicAfterUpdate_NotificationMethodType(NotificationMethodType newItem, NotificationMethodType oldItem, IRepositoryActionResult<NotificationMethodType> result);

		partial void RunCustomLogicOnGetQueryableByPK_NotificationMethodType(ref IQueryable<NotificationMethodType> qryItem, int notificationMethodTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_NotificationMethodType(ref NotificationMethodType dbItem, int notificationMethodTypeId, int numChildLevels);



		#endregion NotificationMethodType

		#region NotificationRule

		public async Task<IRepositoryActionResult<NotificationRule>> InsertAsync(NotificationRule item)
		{
			var result = await InsertAsync<NotificationRule>(item);
			RunCustomLogicAfterInsert_NotificationRule(item, result);

			return result;
		}


		public IQueryable<NotificationRule> GetQueryable_NotificationRule()
		{
			return _ctx.Set<NotificationRule>();
		}

			public async Task<NotificationRule> Get_NotificationRuleAsync(System.Guid notificationRuleId, int numChildLevels)
			{
				var qryItem = GetQueryable_NotificationRule().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_NotificationRule(ref qryItem, notificationRuleId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.NotificationRuleId == notificationRuleId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_NotificationRule(ref dbItem, notificationRuleId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<NotificationRule> GetFirstOrDefaultAsync(NotificationRule item)
			{
				return await _ctx.NotificationRules.Where(x => x.NotificationRuleId == item.NotificationRuleId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<NotificationRule>> UpdateAsync(NotificationRule item)
		{
			var oldItem = await _ctx.NotificationRules.FirstOrDefaultAsync(x => x.NotificationRuleId == item.NotificationRuleId);
			var result = await UpdateAsync<NotificationRule>(item, oldItem);
			RunCustomLogicAfterUpdate_NotificationRule(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<NotificationRule>> Delete_NotificationRuleAsync(System.Guid notificationRuleId)
			{
				return await DeleteAsync<NotificationRule>(_ctx.NotificationRules.Where(x => x.NotificationRuleId == notificationRuleId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<NotificationRule>> DeleteAsync(NotificationRule item)
			{
				return await DeleteAsync<NotificationRule>(_ctx.NotificationRules.Where(x => x.NotificationRuleId == item.NotificationRuleId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_NotificationRule(NotificationRule item, IRepositoryActionResult<NotificationRule> result);

		partial void RunCustomLogicAfterUpdate_NotificationRule(NotificationRule newItem, NotificationRule oldItem, IRepositoryActionResult<NotificationRule> result);

		partial void RunCustomLogicOnGetQueryableByPK_NotificationRule(ref IQueryable<NotificationRule> qryItem, System.Guid notificationRuleId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_NotificationRule(ref NotificationRule dbItem, System.Guid notificationRuleId, int numChildLevels);



		#endregion NotificationRule

		#region RecurrenceRule

		public async Task<IRepositoryActionResult<RecurrenceRule>> InsertAsync(RecurrenceRule item)
		{
			var result = await InsertAsync<RecurrenceRule>(item);
			RunCustomLogicAfterInsert_RecurrenceRule(item, result);

			return result;
		}


		public IQueryable<RecurrenceRule> GetQueryable_RecurrenceRule()
		{
			return _ctx.Set<RecurrenceRule>();
		}

			public async Task<RecurrenceRule> Get_RecurrenceRuleAsync(System.Guid recurrenceRuleId, int numChildLevels)
			{
				var qryItem = GetQueryable_RecurrenceRule().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_RecurrenceRule(ref qryItem, recurrenceRuleId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.RecurrenceRuleId == recurrenceRuleId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_RecurrenceRule(ref dbItem, recurrenceRuleId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<RecurrenceRule> GetFirstOrDefaultAsync(RecurrenceRule item)
			{
				return await _ctx.RecurrenceRules.Where(x => x.RecurrenceRuleId == item.RecurrenceRuleId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<RecurrenceRule>> UpdateAsync(RecurrenceRule item)
		{
			var oldItem = await _ctx.RecurrenceRules.FirstOrDefaultAsync(x => x.RecurrenceRuleId == item.RecurrenceRuleId);
			var result = await UpdateAsync<RecurrenceRule>(item, oldItem);
			RunCustomLogicAfterUpdate_RecurrenceRule(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<RecurrenceRule>> Delete_RecurrenceRuleAsync(System.Guid recurrenceRuleId)
			{
				return await DeleteAsync<RecurrenceRule>(_ctx.RecurrenceRules.Where(x => x.RecurrenceRuleId == recurrenceRuleId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<RecurrenceRule>> DeleteAsync(RecurrenceRule item)
			{
				return await DeleteAsync<RecurrenceRule>(_ctx.RecurrenceRules.Where(x => x.RecurrenceRuleId == item.RecurrenceRuleId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_RecurrenceRule(RecurrenceRule item, IRepositoryActionResult<RecurrenceRule> result);

		partial void RunCustomLogicAfterUpdate_RecurrenceRule(RecurrenceRule newItem, RecurrenceRule oldItem, IRepositoryActionResult<RecurrenceRule> result);

		partial void RunCustomLogicOnGetQueryableByPK_RecurrenceRule(ref IQueryable<RecurrenceRule> qryItem, System.Guid recurrenceRuleId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_RecurrenceRule(ref RecurrenceRule dbItem, System.Guid recurrenceRuleId, int numChildLevels);



		#endregion RecurrenceRule

		#region User

		public async Task<IRepositoryActionResult<User>> InsertAsync(User item)
		{
			var result = await InsertAsync<User>(item);
			RunCustomLogicAfterInsert_User(item, result);

			return result;
		}


		public IQueryable<User> GetQueryable_User()
		{
			return _ctx.Set<User>();
		}

			public async Task<User> Get_UserAsync(System.Guid userId, int numChildLevels)
			{
				var qryItem = GetQueryable_User().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_User(ref qryItem, userId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.UserId == userId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_User(ref dbItem, userId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<User> GetFirstOrDefaultAsync(User item)
			{
				return await _ctx.Users.Where(x => x.UserId == item.UserId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<User>> UpdateAsync(User item)
		{
			var oldItem = await _ctx.Users.FirstOrDefaultAsync(x => x.UserId == item.UserId);
			var result = await UpdateAsync<User>(item, oldItem);
			RunCustomLogicAfterUpdate_User(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<User>> Delete_UserAsync(System.Guid userId)
			{
				return await DeleteAsync<User>(_ctx.Users.Where(x => x.UserId == userId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<User>> DeleteAsync(User item)
			{
				return await DeleteAsync<User>(_ctx.Users.Where(x => x.UserId == item.UserId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_User(User item, IRepositoryActionResult<User> result);

		partial void RunCustomLogicAfterUpdate_User(User newItem, User oldItem, IRepositoryActionResult<User> result);

		partial void RunCustomLogicOnGetQueryableByPK_User(ref IQueryable<User> qryItem, System.Guid userId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_User(ref User dbItem, System.Guid userId, int numChildLevels);



		#endregion User

	}
}
