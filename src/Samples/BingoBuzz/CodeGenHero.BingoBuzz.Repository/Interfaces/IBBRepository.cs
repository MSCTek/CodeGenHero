// <auto-generated> - Template:RepositoryInterface, Version:1.1, Id:f766650e-5c46-4239-b6fd-0cfca2673207
using CodeGenHero.Repository;
using CodeGenHero.BingoBuzz.Repository.Entities.BB;
using System;
using System.Threading.Tasks;

namespace CodeGenHero.BingoBuzz.Repository.Interface
{
	public partial interface IBBRepository : IBBRepositoryCrud
	{

		BBDataContext BBDataContext { get; }

		Task<IRepositoryActionResult<BingoContent>> Delete_BingoContentAsync(System.Guid bingoContentId);
		Task<BingoContent> Get_BingoContentAsync(System.Guid bingoContentId, int numChildLevels);

		Task<IRepositoryActionResult<BingoInstance>> Delete_BingoInstanceAsync(System.Guid bingoInstanceId);
		Task<BingoInstance> Get_BingoInstanceAsync(System.Guid bingoInstanceId, int numChildLevels);

		Task<IRepositoryActionResult<BingoInstanceContent>> Delete_BingoInstanceContentAsync(System.Guid bingoInstanceContentId);
		Task<BingoInstanceContent> Get_BingoInstanceContentAsync(System.Guid bingoInstanceContentId, int numChildLevels);

		Task<IRepositoryActionResult<BingoInstanceContentStatusType>> Delete_BingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId);
		Task<BingoInstanceContentStatusType> Get_BingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId, int numChildLevels);

		Task<IRepositoryActionResult<BingoInstanceEvent>> Delete_BingoInstanceEventAsync(System.Guid bingoInstanceEventId);
		Task<BingoInstanceEvent> Get_BingoInstanceEventAsync(System.Guid bingoInstanceEventId, int numChildLevels);

		Task<IRepositoryActionResult<BingoInstanceEventType>> Delete_BingoInstanceEventTypeAsync(int bingoInstanceEventTypeId);
		Task<BingoInstanceEventType> Get_BingoInstanceEventTypeAsync(int bingoInstanceEventTypeId, int numChildLevels);

		Task<IRepositoryActionResult<BingoInstanceStatusType>> Delete_BingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId);
		Task<BingoInstanceStatusType> Get_BingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId, int numChildLevels);

		Task<IRepositoryActionResult<Company>> Delete_CompanyAsync(System.Guid companyId);
		Task<Company> Get_CompanyAsync(System.Guid companyId, int numChildLevels);

		Task<IRepositoryActionResult<FrequencyType>> Delete_FrequencyTypeAsync(int frequencyTypeId);
		Task<FrequencyType> Get_FrequencyTypeAsync(int frequencyTypeId, int numChildLevels);

		Task<IRepositoryActionResult<Meeting>> Delete_MeetingAsync(System.Guid meetingId);
		Task<Meeting> Get_MeetingAsync(System.Guid meetingId, int numChildLevels);

		Task<IRepositoryActionResult<MeetingAttendee>> Delete_MeetingAttendeeAsync(System.Guid meetingAttendeeId);
		Task<MeetingAttendee> Get_MeetingAttendeeAsync(System.Guid meetingAttendeeId, int numChildLevels);

		Task<IRepositoryActionResult<MeetingSchedule>> Delete_MeetingScheduleAsync(System.Guid meetingScheduleId);
		Task<MeetingSchedule> Get_MeetingScheduleAsync(System.Guid meetingScheduleId, int numChildLevels);

		Task<IRepositoryActionResult<NotificationMethodType>> Delete_NotificationMethodTypeAsync(int notificationMethodTypeId);
		Task<NotificationMethodType> Get_NotificationMethodTypeAsync(int notificationMethodTypeId, int numChildLevels);

		Task<IRepositoryActionResult<NotificationRule>> Delete_NotificationRuleAsync(System.Guid notificationRuleId);
		Task<NotificationRule> Get_NotificationRuleAsync(System.Guid notificationRuleId, int numChildLevels);

		Task<IRepositoryActionResult<RecurrenceRule>> Delete_RecurrenceRuleAsync(System.Guid recurrenceRuleId);
		Task<RecurrenceRule> Get_RecurrenceRuleAsync(System.Guid recurrenceRuleId, int numChildLevels);

		Task<IRepositoryActionResult<User>> Delete_UserAsync(System.Guid userId);
		Task<User> Get_UserAsync(System.Guid userId, int numChildLevels);

	}
}
