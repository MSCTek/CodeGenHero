// <auto-generated> - Template:WebApiDataService, Version:1.1, Id:424e7ec7-bd9d-4cd3-9257-6ffbc772b82e
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using CodeGenHero.BingoBuzz.API.Client.Interface;
using xDTO = CodeGenHero.BingoBuzz.DTO.BB;

namespace CodeGenHero.BingoBuzz.API.Client
{
	public partial class WebApiDataServiceBB : WebApiDataServiceBase, IWebApiDataServiceBB
	{
		public WebApiDataServiceBB(ILoggingService log, IWebApiExecutionContext context) : base(log, context)
		{ }

		private WebApiDataServiceBB() : base()
		{ }


		#region GetAllPages

		public async Task<IList<xDTO.BingoContent>> GetAllPagesBingoContentsAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetBingoContentsAsync);
		}

		public async Task<IList<xDTO.BingoInstance>> GetAllPagesBingoInstancesAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetBingoInstancesAsync);
		}

		public async Task<IList<xDTO.BingoInstanceContent>> GetAllPagesBingoInstanceContentsAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetBingoInstanceContentsAsync);
		}

		public async Task<IList<xDTO.BingoInstanceContentStatusType>> GetAllPagesBingoInstanceContentStatusTypesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetBingoInstanceContentStatusTypesAsync);
		}

		public async Task<IList<xDTO.BingoInstanceEvent>> GetAllPagesBingoInstanceEventsAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetBingoInstanceEventsAsync);
		}

		public async Task<IList<xDTO.BingoInstanceEventType>> GetAllPagesBingoInstanceEventTypesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetBingoInstanceEventTypesAsync);
		}

		public async Task<IList<xDTO.BingoInstanceStatusType>> GetAllPagesBingoInstanceStatusTypesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetBingoInstanceStatusTypesAsync);
		}

		public async Task<IList<xDTO.Company>> GetAllPagesCompaniesAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetCompaniesAsync);
		}

		public async Task<IList<xDTO.FrequencyType>> GetAllPagesFrequencyTypesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetFrequencyTypesAsync);
		}

		public async Task<IList<xDTO.Meeting>> GetAllPagesMeetingsAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetMeetingsAsync);
		}

		public async Task<IList<xDTO.MeetingAttendee>> GetAllPagesMeetingAttendeesAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetMeetingAttendeesAsync);
		}

		public async Task<IList<xDTO.MeetingSchedule>> GetAllPagesMeetingSchedulesAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetMeetingSchedulesAsync);
		}

		public async Task<IList<xDTO.NotificationMethodType>> GetAllPagesNotificationMethodTypesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetNotificationMethodTypesAsync);
		}

		public async Task<IList<xDTO.NotificationRule>> GetAllPagesNotificationRulesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetNotificationRulesAsync);
		}

		public async Task<IList<xDTO.RecurrenceRule>> GetAllPagesRecurrenceRulesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetRecurrenceRulesAsync);
		}

		public async Task<IList<xDTO.User>> GetAllPagesUsersAsync(
			DateTime? minUpdatedDate = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetUsersAsync);
		}

		#endregion GetAllPages



		#region GetOnePage

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoContent>>>> GetBingoContentsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.BingoContent>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}BingoContents", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoContent>>>> GetBingoContentsAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetBingoContentsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstance>>>> GetBingoInstancesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.BingoInstance>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}BingoInstances", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstance>>>> GetBingoInstancesAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetBingoInstancesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceContent>>>> GetBingoInstanceContentsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.BingoInstanceContent>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceContent>>>> GetBingoInstanceContentsAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetBingoInstanceContentsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceContentStatusType>>>> GetBingoInstanceContentStatusTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.BingoInstanceContentStatusType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}BingoInstanceContentStatusTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceContentStatusType>>>> GetBingoInstanceContentStatusTypesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetBingoInstanceContentStatusTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceEvent>>>> GetBingoInstanceEventsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.BingoInstanceEvent>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceEvent>>>> GetBingoInstanceEventsAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetBingoInstanceEventsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceEventType>>>> GetBingoInstanceEventTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.BingoInstanceEventType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceEventType>>>> GetBingoInstanceEventTypesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetBingoInstanceEventTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceStatusType>>>> GetBingoInstanceStatusTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.BingoInstanceStatusType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}BingoInstanceStatusTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceStatusType>>>> GetBingoInstanceStatusTypesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetBingoInstanceStatusTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Company>>>> GetCompaniesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Company>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Companies", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Company>>>> GetCompaniesAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetCompaniesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FrequencyType>>>> GetFrequencyTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.FrequencyType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}FrequencyTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FrequencyType>>>> GetFrequencyTypesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetFrequencyTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Meeting>>>> GetMeetingsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Meeting>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Meetings", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Meeting>>>> GetMeetingsAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetMeetingsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.MeetingAttendee>>>> GetMeetingAttendeesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.MeetingAttendee>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}MeetingAttendees", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.MeetingAttendee>>>> GetMeetingAttendeesAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetMeetingAttendeesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.MeetingSchedule>>>> GetMeetingSchedulesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.MeetingSchedule>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}MeetingSchedules", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.MeetingSchedule>>>> GetMeetingSchedulesAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetMeetingSchedulesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationMethodType>>>> GetNotificationMethodTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.NotificationMethodType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationMethodType>>>> GetNotificationMethodTypesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetNotificationMethodTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationRule>>>> GetNotificationRulesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.NotificationRule>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}NotificationRules", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationRule>>>> GetNotificationRulesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetNotificationRulesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.RecurrenceRule>>>> GetRecurrenceRulesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.RecurrenceRule>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}RecurrenceRules", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.RecurrenceRule>>>> GetRecurrenceRulesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetRecurrenceRulesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.User>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Users", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(
			DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minUpdatedDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "UpdatedDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minUpdatedDate;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetUsersAsync(pageDataRequest);
		}

		#endregion GetOnePage



		#region Get By PK

		public async Task<IHttpCallResultCGHT<xDTO.BingoContent>> GetBingoContentAsync(System.Guid bingoContentId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.BingoContent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoContents/{bingoContentId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstance>> GetBingoInstanceAsync(System.Guid bingoInstanceId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.BingoInstance>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstances/{bingoInstanceId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceContent>> GetBingoInstanceContentAsync(System.Guid bingoInstanceContentId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.BingoInstanceContent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents/{bingoInstanceContentId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceContentStatusType>> GetBingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.BingoInstanceContentStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceContentStatusTypes/{bingoInstanceContentStatusTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceEvent>> GetBingoInstanceEventAsync(System.Guid bingoInstanceEventId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.BingoInstanceEvent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents/{bingoInstanceEventId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceEventType>> GetBingoInstanceEventTypeAsync(int bingoInstanceEventTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.BingoInstanceEventType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes/{bingoInstanceEventTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceStatusType>> GetBingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.BingoInstanceStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceStatusTypes/{bingoInstanceStatusTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Company>> GetCompanyAsync(System.Guid companyId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Company>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Companies/{companyId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FrequencyType>> GetFrequencyTypeAsync(int frequencyTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.FrequencyType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FrequencyTypes/{frequencyTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Meeting>> GetMeetingAsync(System.Guid meetingId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Meeting>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Meetings/{meetingId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.MeetingAttendee>> GetMeetingAttendeeAsync(System.Guid meetingAttendeeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.MeetingAttendee>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingAttendees/{meetingAttendeeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.MeetingSchedule>> GetMeetingScheduleAsync(System.Guid meetingScheduleId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.MeetingSchedule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingSchedules/{meetingScheduleId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NotificationMethodType>> GetNotificationMethodTypeAsync(int notificationMethodTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.NotificationMethodType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes/{notificationMethodTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NotificationRule>> GetNotificationRuleAsync(System.Guid notificationRuleId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.NotificationRule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationRules/{notificationRuleId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.RecurrenceRule>> GetRecurrenceRuleAsync(System.Guid recurrenceRuleId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.RecurrenceRule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RecurrenceRules/{recurrenceRuleId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.User>> GetUserAsync(System.Guid userId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.User>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users/{userId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		#endregion Get By PK



		#region Create

			public async Task<IHttpCallResultCGHT<xDTO.BingoContent>> CreateBingoContentAsync(xDTO.BingoContent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.BingoContent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoContents/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstance>> CreateBingoInstanceAsync(xDTO.BingoInstance item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.BingoInstance>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstances/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceContent>> CreateBingoInstanceContentAsync(xDTO.BingoInstanceContent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.BingoInstanceContent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceContentStatusType>> CreateBingoInstanceContentStatusTypeAsync(xDTO.BingoInstanceContentStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.BingoInstanceContentStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceContentStatusTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceEvent>> CreateBingoInstanceEventAsync(xDTO.BingoInstanceEvent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.BingoInstanceEvent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceEventType>> CreateBingoInstanceEventTypeAsync(xDTO.BingoInstanceEventType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.BingoInstanceEventType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceStatusType>> CreateBingoInstanceStatusTypeAsync(xDTO.BingoInstanceStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.BingoInstanceStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceStatusTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Company>> CreateCompanyAsync(xDTO.Company item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Company>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Companies/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FrequencyType>> CreateFrequencyTypeAsync(xDTO.FrequencyType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.FrequencyType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FrequencyTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Meeting>> CreateMeetingAsync(xDTO.Meeting item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Meeting>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Meetings/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.MeetingAttendee>> CreateMeetingAttendeeAsync(xDTO.MeetingAttendee item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.MeetingAttendee>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}MeetingAttendees/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.MeetingSchedule>> CreateMeetingScheduleAsync(xDTO.MeetingSchedule item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.MeetingSchedule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}MeetingSchedules/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.NotificationMethodType>> CreateNotificationMethodTypeAsync(xDTO.NotificationMethodType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.NotificationMethodType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.NotificationRule>> CreateNotificationRuleAsync(xDTO.NotificationRule item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.NotificationRule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationRules/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.RecurrenceRule>> CreateRecurrenceRuleAsync(xDTO.RecurrenceRule item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.RecurrenceRule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}RecurrenceRules/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.User>> CreateUserAsync(xDTO.User item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.User>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Users/", item);
				return retVal;
			}

		#endregion Create



		#region Update

			public async Task<IHttpCallResultCGHT<xDTO.BingoContent>> UpdateBingoContentAsync(xDTO.BingoContent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.BingoContent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoContents/{item.BingoContentId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstance>> UpdateBingoInstanceAsync(xDTO.BingoInstance item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.BingoInstance>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstances/{item.BingoInstanceId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceContent>> UpdateBingoInstanceContentAsync(xDTO.BingoInstanceContent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.BingoInstanceContent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents/{item.BingoInstanceContentId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceContentStatusType>> UpdateBingoInstanceContentStatusTypeAsync(xDTO.BingoInstanceContentStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.BingoInstanceContentStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceContentStatusTypes/{item.BingoInstanceContentStatusTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceEvent>> UpdateBingoInstanceEventAsync(xDTO.BingoInstanceEvent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.BingoInstanceEvent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents/{item.BingoInstanceEventId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceEventType>> UpdateBingoInstanceEventTypeAsync(xDTO.BingoInstanceEventType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.BingoInstanceEventType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes/{item.BingoInstanceEventTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceStatusType>> UpdateBingoInstanceStatusTypeAsync(xDTO.BingoInstanceStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.BingoInstanceStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}BingoInstanceStatusTypes/{item.BingoInstanceStatusTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Company>> UpdateCompanyAsync(xDTO.Company item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Company>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Companies/{item.CompanyId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FrequencyType>> UpdateFrequencyTypeAsync(xDTO.FrequencyType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.FrequencyType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FrequencyTypes/{item.FrequencyTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Meeting>> UpdateMeetingAsync(xDTO.Meeting item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Meeting>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Meetings/{item.MeetingId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.MeetingAttendee>> UpdateMeetingAttendeeAsync(xDTO.MeetingAttendee item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.MeetingAttendee>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}MeetingAttendees/{item.MeetingAttendeeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.MeetingSchedule>> UpdateMeetingScheduleAsync(xDTO.MeetingSchedule item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.MeetingSchedule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}MeetingSchedules/{item.MeetingScheduleId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.NotificationMethodType>> UpdateNotificationMethodTypeAsync(xDTO.NotificationMethodType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.NotificationMethodType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes/{item.NotificationMethodTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.NotificationRule>> UpdateNotificationRuleAsync(xDTO.NotificationRule item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.NotificationRule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationRules/{item.NotificationRuleId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.RecurrenceRule>> UpdateRecurrenceRuleAsync(xDTO.RecurrenceRule item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.RecurrenceRule>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}RecurrenceRules/{item.RecurrenceRuleId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.User>> UpdateUserAsync(xDTO.User item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.User>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Users/{item.UserId}", item);
				return retVal;
			}

		#endregion Update



		#region Delete

		public async Task<IHttpCallResultCGHT<xDTO.BingoContent>> DeleteBingoContentAsync(System.Guid bingoContentId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.BingoContent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoContents/{bingoContentId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstance>> DeleteBingoInstanceAsync(System.Guid bingoInstanceId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.BingoInstance>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstances/{bingoInstanceId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceContent>> DeleteBingoInstanceContentAsync(System.Guid bingoInstanceContentId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.BingoInstanceContent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceContents/{bingoInstanceContentId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceContentStatusType>> DeleteBingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.BingoInstanceContentStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceContentStatusTypes/{bingoInstanceContentStatusTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceEvent>> DeleteBingoInstanceEventAsync(System.Guid bingoInstanceEventId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.BingoInstanceEvent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEvents/{bingoInstanceEventId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceEventType>> DeleteBingoInstanceEventTypeAsync(int bingoInstanceEventTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.BingoInstanceEventType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceEventTypes/{bingoInstanceEventTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.BingoInstanceStatusType>> DeleteBingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.BingoInstanceStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}BingoInstanceStatusTypes/{bingoInstanceStatusTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Company>> DeleteCompanyAsync(System.Guid companyId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Company>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Companies/{companyId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FrequencyType>> DeleteFrequencyTypeAsync(int frequencyTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.FrequencyType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FrequencyTypes/{frequencyTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Meeting>> DeleteMeetingAsync(System.Guid meetingId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Meeting>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Meetings/{meetingId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.MeetingAttendee>> DeleteMeetingAttendeeAsync(System.Guid meetingAttendeeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.MeetingAttendee>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingAttendees/{meetingAttendeeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.MeetingSchedule>> DeleteMeetingScheduleAsync(System.Guid meetingScheduleId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.MeetingSchedule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}MeetingSchedules/{meetingScheduleId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NotificationMethodType>> DeleteNotificationMethodTypeAsync(int notificationMethodTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.NotificationMethodType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationMethodTypes/{notificationMethodTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NotificationRule>> DeleteNotificationRuleAsync(System.Guid notificationRuleId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.NotificationRule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationRules/{notificationRuleId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.RecurrenceRule>> DeleteRecurrenceRuleAsync(System.Guid recurrenceRuleId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.RecurrenceRule>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RecurrenceRules/{recurrenceRuleId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.User>> DeleteUserAsync(System.Guid userId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.User>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users/{userId}");
			return retVal;
		}

		#endregion Delete


	}
}
