// <auto-generated> - Template:WebApiDataServiceInterface, Version:1.1, Id:1ea810ed-61a7-443b-97f2-da5b30311e75
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CodeGenHero.DataService;
using xDTO = CodeGenHero.BingoBuzz.DTO.BB;

namespace CodeGenHero.BingoBuzz.API.Client.Interface
{
	public partial interface IWebApiDataServiceBB : IWebApiDataServiceBase
	{
		#region GetAllPages

		Task<IList<xDTO.BingoContent>> GetAllPagesBingoContentsAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.BingoInstance>> GetAllPagesBingoInstancesAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.BingoInstanceContent>> GetAllPagesBingoInstanceContentsAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.BingoInstanceContentStatusType>> GetAllPagesBingoInstanceContentStatusTypesAsync(string sort = null);

		Task<IList<xDTO.BingoInstanceEvent>> GetAllPagesBingoInstanceEventsAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.BingoInstanceEventType>> GetAllPagesBingoInstanceEventTypesAsync(string sort = null);

		Task<IList<xDTO.BingoInstanceStatusType>> GetAllPagesBingoInstanceStatusTypesAsync(string sort = null);

		Task<IList<xDTO.Company>> GetAllPagesCompaniesAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.FrequencyType>> GetAllPagesFrequencyTypesAsync(string sort = null);

		Task<IList<xDTO.Meeting>> GetAllPagesMeetingsAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.MeetingAttendee>> GetAllPagesMeetingAttendeesAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.MeetingSchedule>> GetAllPagesMeetingSchedulesAsync(DateTime? minUpdatedDate = null, string sort = null);

		Task<IList<xDTO.NotificationMethodType>> GetAllPagesNotificationMethodTypesAsync(string sort = null);

		Task<IList<xDTO.NotificationRule>> GetAllPagesNotificationRulesAsync(string sort = null);

		Task<IList<xDTO.RecurrenceRule>> GetAllPagesRecurrenceRulesAsync(string sort = null);

		Task<IList<xDTO.User>> GetAllPagesUsersAsync(DateTime? minUpdatedDate = null, string sort = null);


		#endregion GetAllPages


		#region GetPageData

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoContent>>>> GetBingoContentsAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoContent>>>> GetBingoContentsAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstance>>>> GetBingoInstancesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstance>>>> GetBingoInstancesAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceContent>>>> GetBingoInstanceContentsAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceContent>>>> GetBingoInstanceContentsAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceContentStatusType>>>> GetBingoInstanceContentStatusTypesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceContentStatusType>>>> GetBingoInstanceContentStatusTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceEvent>>>> GetBingoInstanceEventsAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceEvent>>>> GetBingoInstanceEventsAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceEventType>>>> GetBingoInstanceEventTypesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceEventType>>>> GetBingoInstanceEventTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceStatusType>>>> GetBingoInstanceStatusTypesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.BingoInstanceStatusType>>>> GetBingoInstanceStatusTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Company>>>> GetCompaniesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Company>>>> GetCompaniesAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FrequencyType>>>> GetFrequencyTypesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FrequencyType>>>> GetFrequencyTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Meeting>>>> GetMeetingsAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Meeting>>>> GetMeetingsAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.MeetingAttendee>>>> GetMeetingAttendeesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.MeetingAttendee>>>> GetMeetingAttendeesAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.MeetingSchedule>>>> GetMeetingSchedulesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.MeetingSchedule>>>> GetMeetingSchedulesAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationMethodType>>>> GetNotificationMethodTypesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationMethodType>>>> GetNotificationMethodTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationRule>>>> GetNotificationRulesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationRule>>>> GetNotificationRulesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.RecurrenceRule>>>> GetRecurrenceRulesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.RecurrenceRule>>>> GetRecurrenceRulesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(DateTime? minUpdatedDate = null, string sort = null, int page = 1, int pageSize = 100);


		#endregion GetPageData


		#region Get By PK

		Task<IHttpCallResultCGHT<xDTO.BingoContent>> GetBingoContentAsync(System.Guid bingoContentId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.BingoInstance>> GetBingoInstanceAsync(System.Guid bingoInstanceId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceContent>> GetBingoInstanceContentAsync(System.Guid bingoInstanceContentId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceContentStatusType>> GetBingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceEvent>> GetBingoInstanceEventAsync(System.Guid bingoInstanceEventId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceEventType>> GetBingoInstanceEventTypeAsync(int bingoInstanceEventTypeId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceStatusType>> GetBingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.Company>> GetCompanyAsync(System.Guid companyId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.FrequencyType>> GetFrequencyTypeAsync(int frequencyTypeId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.Meeting>> GetMeetingAsync(System.Guid meetingId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.MeetingAttendee>> GetMeetingAttendeeAsync(System.Guid meetingAttendeeId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.MeetingSchedule>> GetMeetingScheduleAsync(System.Guid meetingScheduleId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.NotificationMethodType>> GetNotificationMethodTypeAsync(int notificationMethodTypeId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.NotificationRule>> GetNotificationRuleAsync(System.Guid notificationRuleId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.RecurrenceRule>> GetRecurrenceRuleAsync(System.Guid recurrenceRuleId, int numChildLevels);

		Task<IHttpCallResultCGHT<xDTO.User>> GetUserAsync(System.Guid userId, int numChildLevels);


		#endregion Get By PK


		#region Create

		Task<IHttpCallResultCGHT<xDTO.BingoContent>> CreateBingoContentAsync(xDTO.BingoContent item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstance>> CreateBingoInstanceAsync(xDTO.BingoInstance item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceContent>> CreateBingoInstanceContentAsync(xDTO.BingoInstanceContent item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceContentStatusType>> CreateBingoInstanceContentStatusTypeAsync(xDTO.BingoInstanceContentStatusType item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceEvent>> CreateBingoInstanceEventAsync(xDTO.BingoInstanceEvent item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceEventType>> CreateBingoInstanceEventTypeAsync(xDTO.BingoInstanceEventType item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceStatusType>> CreateBingoInstanceStatusTypeAsync(xDTO.BingoInstanceStatusType item);

		Task<IHttpCallResultCGHT<xDTO.Company>> CreateCompanyAsync(xDTO.Company item);

		Task<IHttpCallResultCGHT<xDTO.FrequencyType>> CreateFrequencyTypeAsync(xDTO.FrequencyType item);

		Task<IHttpCallResultCGHT<xDTO.Meeting>> CreateMeetingAsync(xDTO.Meeting item);

		Task<IHttpCallResultCGHT<xDTO.MeetingAttendee>> CreateMeetingAttendeeAsync(xDTO.MeetingAttendee item);

		Task<IHttpCallResultCGHT<xDTO.MeetingSchedule>> CreateMeetingScheduleAsync(xDTO.MeetingSchedule item);

		Task<IHttpCallResultCGHT<xDTO.NotificationMethodType>> CreateNotificationMethodTypeAsync(xDTO.NotificationMethodType item);

		Task<IHttpCallResultCGHT<xDTO.NotificationRule>> CreateNotificationRuleAsync(xDTO.NotificationRule item);

		Task<IHttpCallResultCGHT<xDTO.RecurrenceRule>> CreateRecurrenceRuleAsync(xDTO.RecurrenceRule item);

		Task<IHttpCallResultCGHT<xDTO.User>> CreateUserAsync(xDTO.User item);


		#endregion Create


		#region Update

		Task<IHttpCallResultCGHT<xDTO.BingoContent>> UpdateBingoContentAsync(xDTO.BingoContent item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstance>> UpdateBingoInstanceAsync(xDTO.BingoInstance item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceContent>> UpdateBingoInstanceContentAsync(xDTO.BingoInstanceContent item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceContentStatusType>> UpdateBingoInstanceContentStatusTypeAsync(xDTO.BingoInstanceContentStatusType item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceEvent>> UpdateBingoInstanceEventAsync(xDTO.BingoInstanceEvent item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceEventType>> UpdateBingoInstanceEventTypeAsync(xDTO.BingoInstanceEventType item);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceStatusType>> UpdateBingoInstanceStatusTypeAsync(xDTO.BingoInstanceStatusType item);

		Task<IHttpCallResultCGHT<xDTO.Company>> UpdateCompanyAsync(xDTO.Company item);

		Task<IHttpCallResultCGHT<xDTO.FrequencyType>> UpdateFrequencyTypeAsync(xDTO.FrequencyType item);

		Task<IHttpCallResultCGHT<xDTO.Meeting>> UpdateMeetingAsync(xDTO.Meeting item);

		Task<IHttpCallResultCGHT<xDTO.MeetingAttendee>> UpdateMeetingAttendeeAsync(xDTO.MeetingAttendee item);

		Task<IHttpCallResultCGHT<xDTO.MeetingSchedule>> UpdateMeetingScheduleAsync(xDTO.MeetingSchedule item);

		Task<IHttpCallResultCGHT<xDTO.NotificationMethodType>> UpdateNotificationMethodTypeAsync(xDTO.NotificationMethodType item);

		Task<IHttpCallResultCGHT<xDTO.NotificationRule>> UpdateNotificationRuleAsync(xDTO.NotificationRule item);

		Task<IHttpCallResultCGHT<xDTO.RecurrenceRule>> UpdateRecurrenceRuleAsync(xDTO.RecurrenceRule item);

		Task<IHttpCallResultCGHT<xDTO.User>> UpdateUserAsync(xDTO.User item);


		#endregion Update


		#region Delete

		Task<IHttpCallResultCGHT<xDTO.BingoContent>> DeleteBingoContentAsync(System.Guid bingoContentId);

		Task<IHttpCallResultCGHT<xDTO.BingoInstance>> DeleteBingoInstanceAsync(System.Guid bingoInstanceId);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceContent>> DeleteBingoInstanceContentAsync(System.Guid bingoInstanceContentId);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceContentStatusType>> DeleteBingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceEvent>> DeleteBingoInstanceEventAsync(System.Guid bingoInstanceEventId);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceEventType>> DeleteBingoInstanceEventTypeAsync(int bingoInstanceEventTypeId);

		Task<IHttpCallResultCGHT<xDTO.BingoInstanceStatusType>> DeleteBingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId);

		Task<IHttpCallResultCGHT<xDTO.Company>> DeleteCompanyAsync(System.Guid companyId);

		Task<IHttpCallResultCGHT<xDTO.FrequencyType>> DeleteFrequencyTypeAsync(int frequencyTypeId);

		Task<IHttpCallResultCGHT<xDTO.Meeting>> DeleteMeetingAsync(System.Guid meetingId);

		Task<IHttpCallResultCGHT<xDTO.MeetingAttendee>> DeleteMeetingAttendeeAsync(System.Guid meetingAttendeeId);

		Task<IHttpCallResultCGHT<xDTO.MeetingSchedule>> DeleteMeetingScheduleAsync(System.Guid meetingScheduleId);

		Task<IHttpCallResultCGHT<xDTO.NotificationMethodType>> DeleteNotificationMethodTypeAsync(int notificationMethodTypeId);

		Task<IHttpCallResultCGHT<xDTO.NotificationRule>> DeleteNotificationRuleAsync(System.Guid notificationRuleId);

		Task<IHttpCallResultCGHT<xDTO.RecurrenceRule>> DeleteRecurrenceRuleAsync(System.Guid recurrenceRuleId);

		Task<IHttpCallResultCGHT<xDTO.User>> DeleteUserAsync(System.Guid userId);


		#endregion Delete


	}
}
