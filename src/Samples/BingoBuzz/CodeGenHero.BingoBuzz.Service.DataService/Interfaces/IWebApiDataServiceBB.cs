// <auto-generated> - Template:WebApiDataServiceInterface, Version:1.0, Id:1ea810ed-61a7-443b-97f2-da5b30311e75
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CodeGenHero.DataService;
using CodeGenHero.BingoBuzz.DTO.BB;

namespace CodeGenHero.BingoBuzz.API.Client.Interface
{
	public partial interface IWebApiDataServiceBB : IWebApiDataServiceBase
	{
		#region GetAllPages

		Task<List<BingoContent>> GetAllPagesBingoContentsAsync(DateTime? minUpdatedDate, string sort = null);

		Task<List<BingoInstance>> GetAllPagesBingoInstancesAsync(DateTime? minUpdatedDate, string sort = null);

		Task<List<BingoInstanceContent>> GetAllPagesBingoInstanceContentsAsync(DateTime? minUpdatedDate, string sort = null);

		Task<List<BingoInstanceContentStatusType>> GetAllPagesBingoInstanceContentStatusTypesAsync(string sort = null);

		Task<List<BingoInstanceEvent>> GetAllPagesBingoInstanceEventsAsync(DateTime? minUpdatedDate, string sort = null);

		Task<List<BingoInstanceEventType>> GetAllPagesBingoInstanceEventTypesAsync(string sort = null);

		Task<List<BingoInstanceStatusType>> GetAllPagesBingoInstanceStatusTypesAsync(string sort = null);

		Task<List<Company>> GetAllPagesCompaniesAsync(DateTime? minUpdatedDate, string sort = null);

		Task<List<FrequencyType>> GetAllPagesFrequencyTypesAsync(string sort = null);

		Task<List<Meeting>> GetAllPagesMeetingsAsync(DateTime? minUpdatedDate, string sort = null);

		Task<List<MeetingAttendee>> GetAllPagesMeetingAttendeesAsync(DateTime? minUpdatedDate, string sort = null);

		Task<List<MeetingSchedule>> GetAllPagesMeetingSchedulesAsync(DateTime? minUpdatedDate, string sort = null);

		Task<List<NotificationMethodType>> GetAllPagesNotificationMethodTypesAsync(string sort = null);

		Task<List<NotificationRule>> GetAllPagesNotificationRulesAsync(string sort = null);

		Task<List<RecurrenceRule>> GetAllPagesRecurrenceRulesAsync(string sort = null);

		Task<List<User>> GetAllPagesUsersAsync(DateTime? minUpdatedDate, string sort = null);


		#endregion GetAllPages


		#region GetPageData

		Task<IPageDataT<List<BingoContent>>> GetBingoContentsAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<BingoContent>>> GetBingoContentsAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<BingoInstance>>> GetBingoInstancesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<BingoInstance>>> GetBingoInstancesAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<BingoInstanceContent>>> GetBingoInstanceContentsAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<BingoInstanceContent>>> GetBingoInstanceContentsAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<BingoInstanceContentStatusType>>> GetBingoInstanceContentStatusTypesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<BingoInstanceContentStatusType>>> GetBingoInstanceContentStatusTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<BingoInstanceEvent>>> GetBingoInstanceEventsAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<BingoInstanceEvent>>> GetBingoInstanceEventsAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<BingoInstanceEventType>>> GetBingoInstanceEventTypesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<BingoInstanceEventType>>> GetBingoInstanceEventTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<BingoInstanceStatusType>>> GetBingoInstanceStatusTypesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<BingoInstanceStatusType>>> GetBingoInstanceStatusTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<Company>>> GetCompaniesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<Company>>> GetCompaniesAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<FrequencyType>>> GetFrequencyTypesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<FrequencyType>>> GetFrequencyTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<Meeting>>> GetMeetingsAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<Meeting>>> GetMeetingsAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<MeetingAttendee>>> GetMeetingAttendeesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<MeetingAttendee>>> GetMeetingAttendeesAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<MeetingSchedule>>> GetMeetingSchedulesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<MeetingSchedule>>> GetMeetingSchedulesAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<NotificationMethodType>>> GetNotificationMethodTypesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<NotificationMethodType>>> GetNotificationMethodTypesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<NotificationRule>>> GetNotificationRulesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<NotificationRule>>> GetNotificationRulesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<RecurrenceRule>>> GetRecurrenceRulesAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<RecurrenceRule>>> GetRecurrenceRulesAsync(string sort = null, int page = 1, int pageSize = 100);

		Task<IPageDataT<List<User>>> GetUsersAsync(IPageDataRequest pageDataRequest);

		Task<IPageDataT<List<User>>> GetUsersAsync(DateTime? minUpdatedDate, string sort = null, int page = 1, int pageSize = 100);


		#endregion GetPageData


		#region Get By PK

		Task<HttpCallResult<BingoContent>> GetBingoContentAsync(System.Guid bingoContentId, int numChildLevels);

		Task<HttpCallResult<BingoInstance>> GetBingoInstanceAsync(System.Guid bingoInstanceId, int numChildLevels);

		Task<HttpCallResult<BingoInstanceContent>> GetBingoInstanceContentAsync(System.Guid bingoInstanceContentId, int numChildLevels);

		Task<HttpCallResult<BingoInstanceContentStatusType>> GetBingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId, int numChildLevels);

		Task<HttpCallResult<BingoInstanceEvent>> GetBingoInstanceEventAsync(System.Guid bingoInstanceEventId, int numChildLevels);

		Task<HttpCallResult<BingoInstanceEventType>> GetBingoInstanceEventTypeAsync(int bingoInstanceEventTypeId, int numChildLevels);

		Task<HttpCallResult<BingoInstanceStatusType>> GetBingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId, int numChildLevels);

		Task<HttpCallResult<Company>> GetCompanyAsync(System.Guid companyId, int numChildLevels);

		Task<HttpCallResult<FrequencyType>> GetFrequencyTypeAsync(int frequencyTypeId, int numChildLevels);

		Task<HttpCallResult<Meeting>> GetMeetingAsync(System.Guid meetingId, int numChildLevels);

		Task<HttpCallResult<MeetingAttendee>> GetMeetingAttendeeAsync(System.Guid meetingAttendeeId, int numChildLevels);

		Task<HttpCallResult<MeetingSchedule>> GetMeetingScheduleAsync(System.Guid meetingScheduleId, int numChildLevels);

		Task<HttpCallResult<NotificationMethodType>> GetNotificationMethodTypeAsync(int notificationMethodTypeId, int numChildLevels);

		Task<HttpCallResult<NotificationRule>> GetNotificationRuleAsync(System.Guid notificationRuleId, int numChildLevels);

		Task<HttpCallResult<RecurrenceRule>> GetRecurrenceRuleAsync(System.Guid recurrenceRuleId, int numChildLevels);

		Task<HttpCallResult<User>> GetUserAsync(System.Guid userId, int numChildLevels);


		#endregion Get By PK


		#region Create

		Task<HttpCallResult<BingoContent>> CreateBingoContentAsync(BingoContent item);

		Task<HttpCallResult<BingoInstance>> CreateBingoInstanceAsync(BingoInstance item);

		Task<HttpCallResult<BingoInstanceContent>> CreateBingoInstanceContentAsync(BingoInstanceContent item);

		Task<HttpCallResult<BingoInstanceContentStatusType>> CreateBingoInstanceContentStatusTypeAsync(BingoInstanceContentStatusType item);

		Task<HttpCallResult<BingoInstanceEvent>> CreateBingoInstanceEventAsync(BingoInstanceEvent item);

		Task<HttpCallResult<BingoInstanceEventType>> CreateBingoInstanceEventTypeAsync(BingoInstanceEventType item);

		Task<HttpCallResult<BingoInstanceStatusType>> CreateBingoInstanceStatusTypeAsync(BingoInstanceStatusType item);

		Task<HttpCallResult<Company>> CreateCompanyAsync(Company item);

		Task<HttpCallResult<FrequencyType>> CreateFrequencyTypeAsync(FrequencyType item);

		Task<HttpCallResult<Meeting>> CreateMeetingAsync(Meeting item);

		Task<HttpCallResult<MeetingAttendee>> CreateMeetingAttendeeAsync(MeetingAttendee item);

		Task<HttpCallResult<MeetingSchedule>> CreateMeetingScheduleAsync(MeetingSchedule item);

		Task<HttpCallResult<NotificationMethodType>> CreateNotificationMethodTypeAsync(NotificationMethodType item);

		Task<HttpCallResult<NotificationRule>> CreateNotificationRuleAsync(NotificationRule item);

		Task<HttpCallResult<RecurrenceRule>> CreateRecurrenceRuleAsync(RecurrenceRule item);

		Task<HttpCallResult<User>> CreateUserAsync(User item);


		#endregion Create


		#region Update

		Task<HttpCallResult<BingoContent>> UpdateBingoContentAsync(BingoContent item);

		Task<HttpCallResult<BingoInstance>> UpdateBingoInstanceAsync(BingoInstance item);

		Task<HttpCallResult<BingoInstanceContent>> UpdateBingoInstanceContentAsync(BingoInstanceContent item);

		Task<HttpCallResult<BingoInstanceContentStatusType>> UpdateBingoInstanceContentStatusTypeAsync(BingoInstanceContentStatusType item);

		Task<HttpCallResult<BingoInstanceEvent>> UpdateBingoInstanceEventAsync(BingoInstanceEvent item);

		Task<HttpCallResult<BingoInstanceEventType>> UpdateBingoInstanceEventTypeAsync(BingoInstanceEventType item);

		Task<HttpCallResult<BingoInstanceStatusType>> UpdateBingoInstanceStatusTypeAsync(BingoInstanceStatusType item);

		Task<HttpCallResult<Company>> UpdateCompanyAsync(Company item);

		Task<HttpCallResult<FrequencyType>> UpdateFrequencyTypeAsync(FrequencyType item);

		Task<HttpCallResult<Meeting>> UpdateMeetingAsync(Meeting item);

		Task<HttpCallResult<MeetingAttendee>> UpdateMeetingAttendeeAsync(MeetingAttendee item);

		Task<HttpCallResult<MeetingSchedule>> UpdateMeetingScheduleAsync(MeetingSchedule item);

		Task<HttpCallResult<NotificationMethodType>> UpdateNotificationMethodTypeAsync(NotificationMethodType item);

		Task<HttpCallResult<NotificationRule>> UpdateNotificationRuleAsync(NotificationRule item);

		Task<HttpCallResult<RecurrenceRule>> UpdateRecurrenceRuleAsync(RecurrenceRule item);

		Task<HttpCallResult<User>> UpdateUserAsync(User item);


		#endregion Update


		#region Delete

		Task<HttpCallResult<BingoContent>> DeleteBingoContentAsync(System.Guid bingoContentId);

		Task<HttpCallResult<BingoInstance>> DeleteBingoInstanceAsync(System.Guid bingoInstanceId);

		Task<HttpCallResult<BingoInstanceContent>> DeleteBingoInstanceContentAsync(System.Guid bingoInstanceContentId);

		Task<HttpCallResult<BingoInstanceContentStatusType>> DeleteBingoInstanceContentStatusTypeAsync(int bingoInstanceContentStatusTypeId);

		Task<HttpCallResult<BingoInstanceEvent>> DeleteBingoInstanceEventAsync(System.Guid bingoInstanceEventId);

		Task<HttpCallResult<BingoInstanceEventType>> DeleteBingoInstanceEventTypeAsync(int bingoInstanceEventTypeId);

		Task<HttpCallResult<BingoInstanceStatusType>> DeleteBingoInstanceStatusTypeAsync(int bingoInstanceStatusTypeId);

		Task<HttpCallResult<Company>> DeleteCompanyAsync(System.Guid companyId);

		Task<HttpCallResult<FrequencyType>> DeleteFrequencyTypeAsync(int frequencyTypeId);

		Task<HttpCallResult<Meeting>> DeleteMeetingAsync(System.Guid meetingId);

		Task<HttpCallResult<MeetingAttendee>> DeleteMeetingAttendeeAsync(System.Guid meetingAttendeeId);

		Task<HttpCallResult<MeetingSchedule>> DeleteMeetingScheduleAsync(System.Guid meetingScheduleId);

		Task<HttpCallResult<NotificationMethodType>> DeleteNotificationMethodTypeAsync(int notificationMethodTypeId);

		Task<HttpCallResult<NotificationRule>> DeleteNotificationRuleAsync(System.Guid notificationRuleId);

		Task<HttpCallResult<RecurrenceRule>> DeleteRecurrenceRuleAsync(System.Guid recurrenceRuleId);

		Task<HttpCallResult<User>> DeleteUserAsync(System.Guid userId);


		#endregion Delete


	}
}
