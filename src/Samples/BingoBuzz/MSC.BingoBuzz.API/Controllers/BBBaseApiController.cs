// <auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Web.Http;
using System.Runtime.CompilerServices;
using System.Web.Http.Routing;
using WebApi.OutputCache.V2;
using MSC.BingoBuzz.Repository;
using MSC.BingoBuzz.Repository.Interface;
using appEnums = CodeGenHero.EAMVCXamPOCO.Enums;
using CodeGenHero.EAMVCXamPOCO.API.Helpers;
using CodeGenHero.EAMVCXamPOCO;
using CodeGenHero.EAMVCXamPOCO.Interface;
using CodeGenHero.EAMVCXamPOCO.Service;

namespace MSC.BingoBuzz.API.Controllers.BB
{
	// 	[AutoInvalidateCacheOutput]
	[RoutePrefix("api/BB")]
	public abstract partial class BBBaseApiController : ApiController, ILoggingService
	{
		private ILoggingService _log;
		private IBBRepository _repository;

		public BBBaseApiController()
		{
			try
			{
				_log = new CodeGenHero.EAMVCXamPOCO.Service.Log4NetLoggingService();

				_repository = new BBRepository(
					new Repository.Entities.BB.BBDataContext());

				RunCustomLogicAfterCtor();
			}
			catch (Exception ex)
			{
				if (_log != null)
				{
					_log.Error(message: $"Failure to initialize repository in controller constructor.",
						logMessageType: appEnums.LogMessageType.Exception_WebApi, ex: ex);
				}
				else
				{
					throw;
				}
			}
		}

		public BBBaseApiController(ILoggingService log, IBBRepository repository)
		{
			_repository = repository;
			_log = log;
			RunCustomLogicAfterCtor();
		}

		public appEnums.LogLevel CurrentLogLevel
		{
			get
			{
				return Log.CurrentLogLevel;
			}

			set
			{
				throw new NotImplementedException();
			}
		}

		protected IBBRepository Repo { get { return _repository; } }

		/// <summary>
		///
		/// </summary>
		/// <remarks>
		/// This is private for a reason - using ILoggingService here in place of Log4NetLoggingService would be preferable.
		/// However, doing so causes the CallerMemberName and CallerFilePath attributes to return null.
		/// This is because those attributes are used by the compiler (not at runtime) to do their magic.
		/// Thus, by abstracting them in an interface the compiler cannot tell which methods are calling.
		/// </remarks>
		private ILoggingService Log
		{
			get
			{
				return _log;
			}
		}

		protected PageData BuildPaginationHeader(UrlHelper urlHelper, string routeName, int page, int totalCount, int pageSize, string sort)
		{   // calculate data for metadata
			var totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
			var prevLink = page > 1 ? urlHelper.Link(routeName,
				new
				{
					page = page - 1,
					pageSize = pageSize,
					sort = sort
				}) : "";
			var nextLink = page < totalPages ? urlHelper.Link(routeName,
				new
				{
					page = page + 1,
					pageSize = pageSize,
					sort = sort
				}) : "";

			return new PageData(currentPage: page, isSuccessStatusCode: true, nextPageLink: nextLink, pageSize: pageSize, previousPageLink: prevLink, totalCount: totalCount, totalPages: totalPages);
		}

		protected string GetClientIpAddress(HttpRequestMessage request = null)
		{
			request = request ?? base.Request;
			return request.GetClientIpAddress();
		}

		protected List<string> GetListByDelimiter(string fields, char delimiter = ',')
		{
			List<string> retVal = new List<string>();

			if (!string.IsNullOrEmpty(fields))
			{
				retVal = fields.ToLower().Split(delimiter).ToList();
			}

			return retVal;
		}

		protected string GetUrl(HttpRequestMessage request = null)
		{
			request = request ?? base.Request;
			return request?.RequestUri?.PathAndQuery;
		}

		protected void OnActionExecuting([CallerMemberName] string methodName = null)
		{
			RunCustomLogicOnActionExecuting(methodName);
		}

		partial void RunCustomLogicAfterCtor();

		partial void RunCustomLogicOnActionExecuting(string methodName);

		#region ILoggingService

		/*
		* This interface is implemented as a facade to ensure the CallerMemberName, CallerFilePath, and CallerLineNumber attributes work.
		*/

		public Guid Debug(string message, appEnums.LogMessageType logMessageType, Exception ex, string userName = null, string clientIPAddress = null,
			[CallerMemberName] string methodName = null, [CallerFilePath] string sourceFile = null, [CallerLineNumber] int lineNumber = 0,
			Decimal? executionTimeInMilliseconds = null, int? httpResponseStatusCode = null, string url = null)
		{
			url = url ?? GetUrl();
			clientIPAddress = clientIPAddress ?? GetClientIpAddress();

			return Log.Debug(message: message, logMessageType: logMessageType, ex: ex, userName: userName,
				clientIPAddress: clientIPAddress ?? GetClientIpAddress(), methodName: methodName, sourceFile: sourceFile,
				lineNumber: lineNumber, executionTimeInMilliseconds: executionTimeInMilliseconds, httpResponseStatusCode: httpResponseStatusCode, url: url ?? GetUrl());
		}

		public Guid Error(string message, appEnums.LogMessageType logMessageType, Exception ex, string userName = null, string clientIPAddress = null,
			[CallerMemberName] string methodName = null, [CallerFilePath] string sourceFile = null, [CallerLineNumber] int lineNumber = 0,
			Decimal? executionTimeInMilliseconds = null, int? httpResponseStatusCode = null, string url = null)
		{
			url = url ?? GetUrl();
			clientIPAddress = clientIPAddress ?? GetClientIpAddress();

			return Log.Error(message: message, logMessageType: logMessageType, ex: ex, userName: userName,
				clientIPAddress: clientIPAddress ?? GetClientIpAddress(), methodName: methodName, sourceFile: sourceFile,
				lineNumber: lineNumber, executionTimeInMilliseconds: executionTimeInMilliseconds, httpResponseStatusCode: httpResponseStatusCode, url: url ?? GetUrl());
		}

		public Guid Fatal(string message, appEnums.LogMessageType logMessageType, Exception ex, string userName = null, string clientIPAddress = null,
			[CallerMemberName] string methodName = null, [CallerFilePath] string sourceFile = null, [CallerLineNumber] int lineNumber = 0,
			Decimal? executionTimeInMilliseconds = null, int? httpResponseStatusCode = null, string url = null)
		{
			url = url ?? GetUrl();
			clientIPAddress = clientIPAddress ?? GetClientIpAddress();

			return Log.Fatal(message: message, logMessageType: logMessageType, ex: ex, userName: userName,
				clientIPAddress: clientIPAddress ?? GetClientIpAddress(), methodName: methodName, sourceFile: sourceFile,
				lineNumber: lineNumber, executionTimeInMilliseconds: executionTimeInMilliseconds, httpResponseStatusCode: httpResponseStatusCode, url: url ?? GetUrl());
		}

		public Guid Info(string message, appEnums.LogMessageType logMessageType, Exception ex = null, string userName = null, string clientIPAddress = null,
			[CallerMemberName] string methodName = null, [CallerFilePath] string sourceFile = null, [CallerLineNumber] int lineNumber = 0,
			Decimal? executionTimeInMilliseconds = null, int? httpResponseStatusCode = null, string url = null)
		{
			url = url ?? GetUrl();
			clientIPAddress = clientIPAddress ?? GetClientIpAddress();

			return Log.Info(message: message, logMessageType: logMessageType, ex: ex, userName: userName,
				clientIPAddress: clientIPAddress ?? GetClientIpAddress(), methodName: methodName, sourceFile: sourceFile,
				lineNumber: lineNumber, executionTimeInMilliseconds: executionTimeInMilliseconds, httpResponseStatusCode: httpResponseStatusCode, url: url ?? GetUrl());
		}

		public Guid Warn(string message, appEnums.LogMessageType logMessageType, Exception ex = null, string userName = null, string clientIPAddress = null,
			[CallerMemberName] string methodName = null, [CallerFilePath] string sourceFile = null, [CallerLineNumber] int lineNumber = 0,
			Decimal? executionTimeInMilliseconds = null, int? httpResponseStatusCode = null, string url = null)
		{
			url = url ?? GetUrl();
			clientIPAddress = clientIPAddress ?? GetClientIpAddress();

			return Log.Warn(message: message, logMessageType: logMessageType, ex: ex, userName: userName,
				clientIPAddress: clientIPAddress ?? GetClientIpAddress(), methodName: methodName, sourceFile: sourceFile,
				lineNumber: lineNumber, executionTimeInMilliseconds: executionTimeInMilliseconds, httpResponseStatusCode: httpResponseStatusCode, url: url ?? GetUrl());
		}

		#endregion ILoggingService
	}
}